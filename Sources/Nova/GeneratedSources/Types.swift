// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
internal protocol APIProtocol: Sendable {
    /// Generates audio from the input text.
    ///
    /// - Remark: HTTP `POST /audio/speech`.
    /// - Remark: Generated from `#/paths//audio/speech/post(createSpeech)`.
    func createSpeech(_ input: Operations.createSpeech.Input) async throws -> Operations.createSpeech.Output
    /// Transcribes audio into the input language.
    ///
    /// - Remark: HTTP `POST /audio/transcriptions`.
    /// - Remark: Generated from `#/paths//audio/transcriptions/post(createTranscription)`.
    func createTranscription(_ input: Operations.createTranscription.Input) async throws -> Operations.createTranscription.Output
    /// Translates audio into English.
    ///
    /// - Remark: HTTP `POST /audio/translations`.
    /// - Remark: Generated from `#/paths//audio/translations/post(createTranslation)`.
    func createTranslation(_ input: Operations.createTranslation.Input) async throws -> Operations.createTranslation.Output
    /// Creates a model response for the given chat conversation. Learn more in the
    /// [text generation](/docs/guides/text-generation), [vision](/docs/guides/vision),
    /// and [audio](/docs/guides/audio) guides.
    ///
    ///
    /// - Remark: HTTP `POST /chat/completions`.
    /// - Remark: Generated from `#/paths//chat/completions/post(createChatCompletion)`.
    func createChatCompletion(_ input: Operations.createChatCompletion.Input) async throws -> Operations.createChatCompletion.Output
    /// Creates an edited or extended image given an original image and a prompt.
    ///
    /// - Remark: HTTP `POST /images/edits`.
    /// - Remark: Generated from `#/paths//images/edits/post(createImageEdit)`.
    func createImageEdit(_ input: Operations.createImageEdit.Input) async throws -> Operations.createImageEdit.Output
    /// Creates an image given a prompt.
    ///
    /// - Remark: HTTP `POST /images/generations`.
    /// - Remark: Generated from `#/paths//images/generations/post(createImage)`.
    func createImage(_ input: Operations.createImage.Input) async throws -> Operations.createImage.Output
    /// Creates a variation of a given image.
    ///
    /// - Remark: HTTP `POST /images/variations`.
    /// - Remark: Generated from `#/paths//images/variations/post(createImageVariation)`.
    func createImageVariation(_ input: Operations.createImageVariation.Input) async throws -> Operations.createImageVariation.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Generates audio from the input text.
    ///
    /// - Remark: HTTP `POST /audio/speech`.
    /// - Remark: Generated from `#/paths//audio/speech/post(createSpeech)`.
    internal func createSpeech(
        headers: Operations.createSpeech.Input.Headers = .init(),
        body: Operations.createSpeech.Input.Body
    ) async throws -> Operations.createSpeech.Output {
        try await createSpeech(Operations.createSpeech.Input(
            headers: headers,
            body: body
        ))
    }
    /// Transcribes audio into the input language.
    ///
    /// - Remark: HTTP `POST /audio/transcriptions`.
    /// - Remark: Generated from `#/paths//audio/transcriptions/post(createTranscription)`.
    internal func createTranscription(
        headers: Operations.createTranscription.Input.Headers = .init(),
        body: Operations.createTranscription.Input.Body
    ) async throws -> Operations.createTranscription.Output {
        try await createTranscription(Operations.createTranscription.Input(
            headers: headers,
            body: body
        ))
    }
    /// Translates audio into English.
    ///
    /// - Remark: HTTP `POST /audio/translations`.
    /// - Remark: Generated from `#/paths//audio/translations/post(createTranslation)`.
    internal func createTranslation(
        headers: Operations.createTranslation.Input.Headers = .init(),
        body: Operations.createTranslation.Input.Body
    ) async throws -> Operations.createTranslation.Output {
        try await createTranslation(Operations.createTranslation.Input(
            headers: headers,
            body: body
        ))
    }
    /// Creates a model response for the given chat conversation. Learn more in the
    /// [text generation](/docs/guides/text-generation), [vision](/docs/guides/vision),
    /// and [audio](/docs/guides/audio) guides.
    ///
    ///
    /// - Remark: HTTP `POST /chat/completions`.
    /// - Remark: Generated from `#/paths//chat/completions/post(createChatCompletion)`.
    internal func createChatCompletion(
        headers: Operations.createChatCompletion.Input.Headers = .init(),
        body: Operations.createChatCompletion.Input.Body
    ) async throws -> Operations.createChatCompletion.Output {
        try await createChatCompletion(Operations.createChatCompletion.Input(
            headers: headers,
            body: body
        ))
    }
    /// Creates an edited or extended image given an original image and a prompt.
    ///
    /// - Remark: HTTP `POST /images/edits`.
    /// - Remark: Generated from `#/paths//images/edits/post(createImageEdit)`.
    internal func createImageEdit(
        headers: Operations.createImageEdit.Input.Headers = .init(),
        body: Operations.createImageEdit.Input.Body
    ) async throws -> Operations.createImageEdit.Output {
        try await createImageEdit(Operations.createImageEdit.Input(
            headers: headers,
            body: body
        ))
    }
    /// Creates an image given a prompt.
    ///
    /// - Remark: HTTP `POST /images/generations`.
    /// - Remark: Generated from `#/paths//images/generations/post(createImage)`.
    internal func createImage(
        headers: Operations.createImage.Input.Headers = .init(),
        body: Operations.createImage.Input.Body
    ) async throws -> Operations.createImage.Output {
        try await createImage(Operations.createImage.Input(
            headers: headers,
            body: body
        ))
    }
    /// Creates a variation of a given image.
    ///
    /// - Remark: HTTP `POST /images/variations`.
    /// - Remark: Generated from `#/paths//images/variations/post(createImageVariation)`.
    internal func createImageVariation(
        headers: Operations.createImageVariation.Input.Headers = .init(),
        body: Operations.createImageVariation.Input.Body
    ) async throws -> Operations.createImageVariation.Output {
        try await createImageVariation(Operations.createImageVariation.Input(
            headers: headers,
            body: body
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
internal enum Servers {
    internal enum Server1 {
        internal static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://api.openai.com/v1",
                variables: []
            )
        }
    }
    @available(*, deprecated, renamed: "Servers.Server1.url")
    internal static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.openai.com/v1",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
internal enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    internal enum Schemas {
        /// The format of the output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/AudioResponseFormat`.
        internal enum AudioResponseFormat: String, Codable, Hashable, Sendable, CaseIterable {
            case json = "json"
            case text = "text"
            case srt = "srt"
            case verbose_json = "verbose_json"
            case vtt = "vtt"
        }
        /// Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ChatCompletionFunctionCallOption`.
        internal struct ChatCompletionFunctionCallOption: Codable, Hashable, Sendable {
            /// The name of the function to call.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionFunctionCallOption/name`.
            internal var name: Swift.String
            /// Creates a new `ChatCompletionFunctionCallOption`.
            ///
            /// - Parameters:
            ///   - name: The name of the function to call.
            internal init(name: Swift.String) {
                self.name = name
            }
            internal enum CodingKeys: String, CodingKey {
                case name
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatCompletionFunctions`.
        @available(*, deprecated)
        internal struct ChatCompletionFunctions: Codable, Hashable, Sendable {
            /// A description of what the function does, used by the model to choose when and how to call the function.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionFunctions/description`.
            internal var description: Swift.String?
            /// The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionFunctions/name`.
            internal var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/ChatCompletionFunctions/parameters`.
            internal var parameters: Components.Schemas.FunctionParameters?
            /// Creates a new `ChatCompletionFunctions`.
            ///
            /// - Parameters:
            ///   - description: A description of what the function does, used by the model to choose when and how to call the function.
            ///   - name: The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
            ///   - parameters:
            internal init(
                description: Swift.String? = nil,
                name: Swift.String,
                parameters: Components.Schemas.FunctionParameters? = nil
            ) {
                self.description = description
                self.name = name
                self.parameters = parameters
            }
            internal enum CodingKeys: String, CodingKey {
                case description
                case name
                case parameters
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageToolCall`.
        internal struct ChatCompletionMessageToolCall: Codable, Hashable, Sendable {
            /// The ID of the tool call.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageToolCall/id`.
            internal var id: Swift.String
            /// The type of the tool. Currently, only `function` is supported.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageToolCall/type`.
            internal enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case function = "function"
            }
            /// The type of the tool. Currently, only `function` is supported.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageToolCall/type`.
            internal var _type: Components.Schemas.ChatCompletionMessageToolCall._typePayload
            /// The function that the model called.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageToolCall/function`.
            internal struct functionPayload: Codable, Hashable, Sendable {
                /// The name of the function to call.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageToolCall/function/name`.
                internal var name: Swift.String
                /// The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageToolCall/function/arguments`.
                internal var arguments: Swift.String
                /// Creates a new `functionPayload`.
                ///
                /// - Parameters:
                ///   - name: The name of the function to call.
                ///   - arguments: The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
                internal init(
                    name: Swift.String,
                    arguments: Swift.String
                ) {
                    self.name = name
                    self.arguments = arguments
                }
                internal enum CodingKeys: String, CodingKey {
                    case name
                    case arguments
                }
            }
            /// The function that the model called.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageToolCall/function`.
            internal var function: Components.Schemas.ChatCompletionMessageToolCall.functionPayload
            /// Creates a new `ChatCompletionMessageToolCall`.
            ///
            /// - Parameters:
            ///   - id: The ID of the tool call.
            ///   - _type: The type of the tool. Currently, only `function` is supported.
            ///   - function: The function that the model called.
            internal init(
                id: Swift.String,
                _type: Components.Schemas.ChatCompletionMessageToolCall._typePayload,
                function: Components.Schemas.ChatCompletionMessageToolCall.functionPayload
            ) {
                self.id = id
                self._type = _type
                self.function = function
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case _type = "type"
                case function
            }
        }
        /// The tool calls generated by the model, such as function calls.
        ///
        /// - Remark: Generated from `#/components/schemas/ChatCompletionMessageToolCalls`.
        internal typealias ChatCompletionMessageToolCalls = [Components.Schemas.ChatCompletionMessageToolCall]
        /// - Remark: Generated from `#/components/schemas/ChatCompletionModalities`.
        internal enum ChatCompletionModalitiesPayload: String, Codable, Hashable, Sendable, CaseIterable {
            case text = "text"
            case audio = "audio"
        }
        /// Output types that you would like the model to generate for this request.
        /// Most models are capable of generating text, which is the default:
        ///
        /// `["text"]`
        ///
        /// The `gpt-4o-audio-preview` model can also be used to [generate audio](/docs/guides/audio). To
        /// request that this model generate both text and audio responses, you can
        /// use:
        ///
        /// `["text", "audio"]`
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ChatCompletionModalities`.
        internal typealias ChatCompletionModalities = [Components.Schemas.ChatCompletionModalitiesPayload]
        /// Specifies a tool the model should use. Use to force the model to call a specific function.
        ///
        /// - Remark: Generated from `#/components/schemas/ChatCompletionNamedToolChoice`.
        internal struct ChatCompletionNamedToolChoice: Codable, Hashable, Sendable {
            /// The type of the tool. Currently, only `function` is supported.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionNamedToolChoice/type`.
            internal enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case function = "function"
            }
            /// The type of the tool. Currently, only `function` is supported.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionNamedToolChoice/type`.
            internal var _type: Components.Schemas.ChatCompletionNamedToolChoice._typePayload
            /// - Remark: Generated from `#/components/schemas/ChatCompletionNamedToolChoice/function`.
            internal struct functionPayload: Codable, Hashable, Sendable {
                /// The name of the function to call.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionNamedToolChoice/function/name`.
                internal var name: Swift.String
                /// Creates a new `functionPayload`.
                ///
                /// - Parameters:
                ///   - name: The name of the function to call.
                internal init(name: Swift.String) {
                    self.name = name
                }
                internal enum CodingKeys: String, CodingKey {
                    case name
                }
            }
            /// - Remark: Generated from `#/components/schemas/ChatCompletionNamedToolChoice/function`.
            internal var function: Components.Schemas.ChatCompletionNamedToolChoice.functionPayload
            /// Creates a new `ChatCompletionNamedToolChoice`.
            ///
            /// - Parameters:
            ///   - _type: The type of the tool. Currently, only `function` is supported.
            ///   - function:
            internal init(
                _type: Components.Schemas.ChatCompletionNamedToolChoice._typePayload,
                function: Components.Schemas.ChatCompletionNamedToolChoice.functionPayload
            ) {
                self._type = _type
                self.function = function
            }
            internal enum CodingKeys: String, CodingKey {
                case _type = "type"
                case function
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage`.
        internal struct ChatCompletionRequestAssistantMessage: Codable, Hashable, Sendable {
            /// The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/content`.
            internal enum contentPayload: Codable, Hashable, Sendable {
                /// The contents of the assistant message.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/content/case1`.
                case case1(Swift.String)
                /// An array of content parts with a defined type. Can be one or more of type `text`, or exactly one of type `refusal`.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/content/case2`.
                case case2([Components.Schemas.ChatCompletionRequestAssistantMessageContentPart])
                internal init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                internal func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/content`.
            internal var content: Components.Schemas.ChatCompletionRequestAssistantMessage.contentPayload?
            /// The refusal message by the assistant.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/refusal`.
            internal var refusal: Swift.String?
            /// The role of the messages author, in this case `assistant`.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/role`.
            internal enum rolePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case assistant = "assistant"
            }
            /// The role of the messages author, in this case `assistant`.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/role`.
            internal var role: Components.Schemas.ChatCompletionRequestAssistantMessage.rolePayload
            /// An optional name for the participant. Provides the model information to differentiate between participants of the same role.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/name`.
            internal var name: Swift.String?
            /// Data about a previous audio response from the model.
            /// [Learn more](/docs/guides/audio).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/audio`.
            internal struct audioPayload: Codable, Hashable, Sendable {
                /// Unique identifier for a previous audio response from the model.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/audio/id`.
                internal var id: Swift.String
                /// Creates a new `audioPayload`.
                ///
                /// - Parameters:
                ///   - id: Unique identifier for a previous audio response from the model.
                internal init(id: Swift.String) {
                    self.id = id
                }
                internal enum CodingKeys: String, CodingKey {
                    case id
                }
            }
            /// Data about a previous audio response from the model.
            /// [Learn more](/docs/guides/audio).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/audio`.
            internal var audio: Components.Schemas.ChatCompletionRequestAssistantMessage.audioPayload?
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/tool_calls`.
            internal var tool_calls: Components.Schemas.ChatCompletionMessageToolCalls?
            /// Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/function_call`.
            @available(*, deprecated)
            internal struct function_callPayload: Codable, Hashable, Sendable {
                /// The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/function_call/arguments`.
                internal var arguments: Swift.String
                /// The name of the function to call.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/function_call/name`.
                internal var name: Swift.String
                /// Creates a new `function_callPayload`.
                ///
                /// - Parameters:
                ///   - arguments: The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
                ///   - name: The name of the function to call.
                internal init(
                    arguments: Swift.String,
                    name: Swift.String
                ) {
                    self.arguments = arguments
                    self.name = name
                }
                internal enum CodingKeys: String, CodingKey {
                    case arguments
                    case name
                }
            }
            /// Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessage/function_call`.
            @available(*, deprecated)
            internal var function_call: Components.Schemas.ChatCompletionRequestAssistantMessage.function_callPayload?
            /// Creates a new `ChatCompletionRequestAssistantMessage`.
            ///
            /// - Parameters:
            ///   - content: The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.
            ///   - refusal: The refusal message by the assistant.
            ///   - role: The role of the messages author, in this case `assistant`.
            ///   - name: An optional name for the participant. Provides the model information to differentiate between participants of the same role.
            ///   - audio: Data about a previous audio response from the model.
            ///   - tool_calls:
            ///   - function_call: Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
            internal init(
                content: Components.Schemas.ChatCompletionRequestAssistantMessage.contentPayload? = nil,
                refusal: Swift.String? = nil,
                role: Components.Schemas.ChatCompletionRequestAssistantMessage.rolePayload,
                name: Swift.String? = nil,
                audio: Components.Schemas.ChatCompletionRequestAssistantMessage.audioPayload? = nil,
                tool_calls: Components.Schemas.ChatCompletionMessageToolCalls? = nil,
                function_call: Components.Schemas.ChatCompletionRequestAssistantMessage.function_callPayload? = nil
            ) {
                self.content = content
                self.refusal = refusal
                self.role = role
                self.name = name
                self.audio = audio
                self.tool_calls = tool_calls
                self.function_call = function_call
            }
            internal enum CodingKeys: String, CodingKey {
                case content
                case refusal
                case role
                case name
                case audio
                case tool_calls
                case function_call
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessageContentPart`.
        internal enum ChatCompletionRequestAssistantMessageContentPart: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessageContentPart/case1`.
            case ChatCompletionRequestMessageContentPartText(Components.Schemas.ChatCompletionRequestMessageContentPartText)
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestAssistantMessageContentPart/case2`.
            case ChatCompletionRequestMessageContentPartRefusal(Components.Schemas.ChatCompletionRequestMessageContentPartRefusal)
            internal init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .ChatCompletionRequestMessageContentPartText(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .ChatCompletionRequestMessageContentPartRefusal(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            internal func encode(to encoder: any Encoder) throws {
                switch self {
                case let .ChatCompletionRequestMessageContentPartText(value):
                    try value.encode(to: encoder)
                case let .ChatCompletionRequestMessageContentPartRefusal(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestFunctionMessage`.
        @available(*, deprecated)
        internal struct ChatCompletionRequestFunctionMessage: Codable, Hashable, Sendable {
            /// The role of the messages author, in this case `function`.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestFunctionMessage/role`.
            internal enum rolePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case function = "function"
            }
            /// The role of the messages author, in this case `function`.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestFunctionMessage/role`.
            internal var role: Components.Schemas.ChatCompletionRequestFunctionMessage.rolePayload
            /// The contents of the function message.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestFunctionMessage/content`.
            internal var content: Swift.String?
            /// The name of the function to call.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestFunctionMessage/name`.
            internal var name: Swift.String
            /// Creates a new `ChatCompletionRequestFunctionMessage`.
            ///
            /// - Parameters:
            ///   - role: The role of the messages author, in this case `function`.
            ///   - content: The contents of the function message.
            ///   - name: The name of the function to call.
            internal init(
                role: Components.Schemas.ChatCompletionRequestFunctionMessage.rolePayload,
                content: Swift.String? = nil,
                name: Swift.String
            ) {
                self.role = role
                self.content = content
                self.name = name
            }
            internal enum CodingKeys: String, CodingKey {
                case role
                case content
                case name
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessage`.
        internal enum ChatCompletionRequestMessage: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessage/case1`.
            case ChatCompletionRequestSystemMessage(Components.Schemas.ChatCompletionRequestSystemMessage)
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessage/case2`.
            case ChatCompletionRequestUserMessage(Components.Schemas.ChatCompletionRequestUserMessage)
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessage/case3`.
            case ChatCompletionRequestAssistantMessage(Components.Schemas.ChatCompletionRequestAssistantMessage)
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessage/case4`.
            case ChatCompletionRequestToolMessage(Components.Schemas.ChatCompletionRequestToolMessage)
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessage/case5`.
            case ChatCompletionRequestFunctionMessage(Components.Schemas.ChatCompletionRequestFunctionMessage)
            internal init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .ChatCompletionRequestSystemMessage(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .ChatCompletionRequestUserMessage(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .ChatCompletionRequestAssistantMessage(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .ChatCompletionRequestToolMessage(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .ChatCompletionRequestFunctionMessage(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            internal func encode(to encoder: any Encoder) throws {
                switch self {
                case let .ChatCompletionRequestSystemMessage(value):
                    try value.encode(to: encoder)
                case let .ChatCompletionRequestUserMessage(value):
                    try value.encode(to: encoder)
                case let .ChatCompletionRequestAssistantMessage(value):
                    try value.encode(to: encoder)
                case let .ChatCompletionRequestToolMessage(value):
                    try value.encode(to: encoder)
                case let .ChatCompletionRequestFunctionMessage(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// Learn about [audio inputs](/docs/guides/audio).
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartAudio`.
        internal struct ChatCompletionRequestMessageContentPartAudio: Codable, Hashable, Sendable {
            /// The type of the content part. Always `input_audio`.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartAudio/type`.
            internal enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case input_audio = "input_audio"
            }
            /// The type of the content part. Always `input_audio`.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartAudio/type`.
            internal var _type: Components.Schemas.ChatCompletionRequestMessageContentPartAudio._typePayload
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartAudio/input_audio`.
            internal struct input_audioPayload: Codable, Hashable, Sendable {
                /// Base64 encoded audio data.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartAudio/input_audio/data`.
                internal var data: Swift.String
                /// The format of the encoded audio data. Currently supports "wav" and "mp3".
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartAudio/input_audio/format`.
                internal enum formatPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case wav = "wav"
                    case mp3 = "mp3"
                }
                /// The format of the encoded audio data. Currently supports "wav" and "mp3".
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartAudio/input_audio/format`.
                internal var format: Components.Schemas.ChatCompletionRequestMessageContentPartAudio.input_audioPayload.formatPayload
                /// Creates a new `input_audioPayload`.
                ///
                /// - Parameters:
                ///   - data: Base64 encoded audio data.
                ///   - format: The format of the encoded audio data. Currently supports "wav" and "mp3".
                internal init(
                    data: Swift.String,
                    format: Components.Schemas.ChatCompletionRequestMessageContentPartAudio.input_audioPayload.formatPayload
                ) {
                    self.data = data
                    self.format = format
                }
                internal enum CodingKeys: String, CodingKey {
                    case data
                    case format
                }
            }
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartAudio/input_audio`.
            internal var input_audio: Components.Schemas.ChatCompletionRequestMessageContentPartAudio.input_audioPayload
            /// Creates a new `ChatCompletionRequestMessageContentPartAudio`.
            ///
            /// - Parameters:
            ///   - _type: The type of the content part. Always `input_audio`.
            ///   - input_audio:
            internal init(
                _type: Components.Schemas.ChatCompletionRequestMessageContentPartAudio._typePayload,
                input_audio: Components.Schemas.ChatCompletionRequestMessageContentPartAudio.input_audioPayload
            ) {
                self._type = _type
                self.input_audio = input_audio
            }
            internal enum CodingKeys: String, CodingKey {
                case _type = "type"
                case input_audio
            }
        }
        /// Learn about [image inputs](/docs/guides/vision).
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartImage`.
        internal struct ChatCompletionRequestMessageContentPartImage: Codable, Hashable, Sendable {
            /// The type of the content part.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartImage/type`.
            internal enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case image_url = "image_url"
            }
            /// The type of the content part.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartImage/type`.
            internal var _type: Components.Schemas.ChatCompletionRequestMessageContentPartImage._typePayload
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartImage/image_url`.
            internal struct image_urlPayload: Codable, Hashable, Sendable {
                /// Either a URL of the image or the base64 encoded image data.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartImage/image_url/url`.
                internal var url: Swift.String
                /// Specifies the detail level of the image. Learn more in the [Vision guide](/docs/guides/vision/low-or-high-fidelity-image-understanding).
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartImage/image_url/detail`.
                internal enum detailPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case auto = "auto"
                    case low = "low"
                    case high = "high"
                }
                /// Specifies the detail level of the image. Learn more in the [Vision guide](/docs/guides/vision/low-or-high-fidelity-image-understanding).
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartImage/image_url/detail`.
                internal var detail: Components.Schemas.ChatCompletionRequestMessageContentPartImage.image_urlPayload.detailPayload?
                /// Creates a new `image_urlPayload`.
                ///
                /// - Parameters:
                ///   - url: Either a URL of the image or the base64 encoded image data.
                ///   - detail: Specifies the detail level of the image. Learn more in the [Vision guide](/docs/guides/vision/low-or-high-fidelity-image-understanding).
                internal init(
                    url: Swift.String,
                    detail: Components.Schemas.ChatCompletionRequestMessageContentPartImage.image_urlPayload.detailPayload? = nil
                ) {
                    self.url = url
                    self.detail = detail
                }
                internal enum CodingKeys: String, CodingKey {
                    case url
                    case detail
                }
            }
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartImage/image_url`.
            internal var image_url: Components.Schemas.ChatCompletionRequestMessageContentPartImage.image_urlPayload
            /// Creates a new `ChatCompletionRequestMessageContentPartImage`.
            ///
            /// - Parameters:
            ///   - _type: The type of the content part.
            ///   - image_url:
            internal init(
                _type: Components.Schemas.ChatCompletionRequestMessageContentPartImage._typePayload,
                image_url: Components.Schemas.ChatCompletionRequestMessageContentPartImage.image_urlPayload
            ) {
                self._type = _type
                self.image_url = image_url
            }
            internal enum CodingKeys: String, CodingKey {
                case _type = "type"
                case image_url
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartRefusal`.
        internal struct ChatCompletionRequestMessageContentPartRefusal: Codable, Hashable, Sendable {
            /// The type of the content part.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartRefusal/type`.
            internal enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case refusal = "refusal"
            }
            /// The type of the content part.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartRefusal/type`.
            internal var _type: Components.Schemas.ChatCompletionRequestMessageContentPartRefusal._typePayload
            /// The refusal message generated by the model.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartRefusal/refusal`.
            internal var refusal: Swift.String
            /// Creates a new `ChatCompletionRequestMessageContentPartRefusal`.
            ///
            /// - Parameters:
            ///   - _type: The type of the content part.
            ///   - refusal: The refusal message generated by the model.
            internal init(
                _type: Components.Schemas.ChatCompletionRequestMessageContentPartRefusal._typePayload,
                refusal: Swift.String
            ) {
                self._type = _type
                self.refusal = refusal
            }
            internal enum CodingKeys: String, CodingKey {
                case _type = "type"
                case refusal
            }
        }
        /// Learn about [text inputs](/docs/guides/text-generation).
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartText`.
        internal struct ChatCompletionRequestMessageContentPartText: Codable, Hashable, Sendable {
            /// The type of the content part.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartText/type`.
            internal enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case text = "text"
            }
            /// The type of the content part.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartText/type`.
            internal var _type: Components.Schemas.ChatCompletionRequestMessageContentPartText._typePayload
            /// The text content.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestMessageContentPartText/text`.
            internal var text: Swift.String
            /// Creates a new `ChatCompletionRequestMessageContentPartText`.
            ///
            /// - Parameters:
            ///   - _type: The type of the content part.
            ///   - text: The text content.
            internal init(
                _type: Components.Schemas.ChatCompletionRequestMessageContentPartText._typePayload,
                text: Swift.String
            ) {
                self._type = _type
                self.text = text
            }
            internal enum CodingKeys: String, CodingKey {
                case _type = "type"
                case text
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestSystemMessage`.
        internal struct ChatCompletionRequestSystemMessage: Codable, Hashable, Sendable {
            /// The contents of the system message.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestSystemMessage/content`.
            internal enum contentPayload: Codable, Hashable, Sendable {
                /// The contents of the system message.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestSystemMessage/content/case1`.
                case case1(Swift.String)
                /// An array of content parts with a defined type. For system messages, only type `text` is supported.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestSystemMessage/content/case2`.
                case case2([Components.Schemas.ChatCompletionRequestSystemMessageContentPart])
                internal init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                internal func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// The contents of the system message.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestSystemMessage/content`.
            internal var content: Components.Schemas.ChatCompletionRequestSystemMessage.contentPayload
            /// The role of the messages author, in this case `system`.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestSystemMessage/role`.
            internal enum rolePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case system = "system"
            }
            /// The role of the messages author, in this case `system`.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestSystemMessage/role`.
            internal var role: Components.Schemas.ChatCompletionRequestSystemMessage.rolePayload
            /// An optional name for the participant. Provides the model information to differentiate between participants of the same role.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestSystemMessage/name`.
            internal var name: Swift.String?
            /// Creates a new `ChatCompletionRequestSystemMessage`.
            ///
            /// - Parameters:
            ///   - content: The contents of the system message.
            ///   - role: The role of the messages author, in this case `system`.
            ///   - name: An optional name for the participant. Provides the model information to differentiate between participants of the same role.
            internal init(
                content: Components.Schemas.ChatCompletionRequestSystemMessage.contentPayload,
                role: Components.Schemas.ChatCompletionRequestSystemMessage.rolePayload,
                name: Swift.String? = nil
            ) {
                self.content = content
                self.role = role
                self.name = name
            }
            internal enum CodingKeys: String, CodingKey {
                case content
                case role
                case name
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestSystemMessageContentPart`.
        internal enum ChatCompletionRequestSystemMessageContentPart: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestSystemMessageContentPart/case1`.
            case ChatCompletionRequestMessageContentPartText(Components.Schemas.ChatCompletionRequestMessageContentPartText)
            internal init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .ChatCompletionRequestMessageContentPartText(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            internal func encode(to encoder: any Encoder) throws {
                switch self {
                case let .ChatCompletionRequestMessageContentPartText(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestToolMessage`.
        internal struct ChatCompletionRequestToolMessage: Codable, Hashable, Sendable {
            /// The role of the messages author, in this case `tool`.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestToolMessage/role`.
            internal enum rolePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case tool = "tool"
            }
            /// The role of the messages author, in this case `tool`.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestToolMessage/role`.
            internal var role: Components.Schemas.ChatCompletionRequestToolMessage.rolePayload
            /// The contents of the tool message.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestToolMessage/content`.
            internal enum contentPayload: Codable, Hashable, Sendable {
                /// The contents of the tool message.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestToolMessage/content/case1`.
                case case1(Swift.String)
                /// An array of content parts with a defined type. For tool messages, only type `text` is supported.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestToolMessage/content/case2`.
                case case2([Components.Schemas.ChatCompletionRequestToolMessageContentPart])
                internal init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                internal func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// The contents of the tool message.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestToolMessage/content`.
            internal var content: Components.Schemas.ChatCompletionRequestToolMessage.contentPayload
            /// Tool call that this message is responding to.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestToolMessage/tool_call_id`.
            internal var tool_call_id: Swift.String
            /// Creates a new `ChatCompletionRequestToolMessage`.
            ///
            /// - Parameters:
            ///   - role: The role of the messages author, in this case `tool`.
            ///   - content: The contents of the tool message.
            ///   - tool_call_id: Tool call that this message is responding to.
            internal init(
                role: Components.Schemas.ChatCompletionRequestToolMessage.rolePayload,
                content: Components.Schemas.ChatCompletionRequestToolMessage.contentPayload,
                tool_call_id: Swift.String
            ) {
                self.role = role
                self.content = content
                self.tool_call_id = tool_call_id
            }
            internal enum CodingKeys: String, CodingKey {
                case role
                case content
                case tool_call_id
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestToolMessageContentPart`.
        internal enum ChatCompletionRequestToolMessageContentPart: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestToolMessageContentPart/case1`.
            case ChatCompletionRequestMessageContentPartText(Components.Schemas.ChatCompletionRequestMessageContentPartText)
            internal init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .ChatCompletionRequestMessageContentPartText(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            internal func encode(to encoder: any Encoder) throws {
                switch self {
                case let .ChatCompletionRequestMessageContentPartText(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestUserMessage`.
        internal struct ChatCompletionRequestUserMessage: Codable, Hashable, Sendable {
            /// The contents of the user message.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestUserMessage/content`.
            internal enum contentPayload: Codable, Hashable, Sendable {
                /// The text contents of the message.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestUserMessage/content/case1`.
                case case1(Swift.String)
                /// An array of content parts with a defined type. Supported options differ based on the [model](/docs/models) being used to generate the response. Can contain text, image, or audio inputs.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestUserMessage/content/case2`.
                case case2([Components.Schemas.ChatCompletionRequestUserMessageContentPart])
                internal init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                internal func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// The contents of the user message.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestUserMessage/content`.
            internal var content: Components.Schemas.ChatCompletionRequestUserMessage.contentPayload
            /// The role of the messages author, in this case `user`.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestUserMessage/role`.
            internal enum rolePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case user = "user"
            }
            /// The role of the messages author, in this case `user`.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestUserMessage/role`.
            internal var role: Components.Schemas.ChatCompletionRequestUserMessage.rolePayload
            /// An optional name for the participant. Provides the model information to differentiate between participants of the same role.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestUserMessage/name`.
            internal var name: Swift.String?
            /// Creates a new `ChatCompletionRequestUserMessage`.
            ///
            /// - Parameters:
            ///   - content: The contents of the user message.
            ///   - role: The role of the messages author, in this case `user`.
            ///   - name: An optional name for the participant. Provides the model information to differentiate between participants of the same role.
            internal init(
                content: Components.Schemas.ChatCompletionRequestUserMessage.contentPayload,
                role: Components.Schemas.ChatCompletionRequestUserMessage.rolePayload,
                name: Swift.String? = nil
            ) {
                self.content = content
                self.role = role
                self.name = name
            }
            internal enum CodingKeys: String, CodingKey {
                case content
                case role
                case name
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestUserMessageContentPart`.
        internal enum ChatCompletionRequestUserMessageContentPart: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestUserMessageContentPart/case1`.
            case ChatCompletionRequestMessageContentPartText(Components.Schemas.ChatCompletionRequestMessageContentPartText)
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestUserMessageContentPart/case2`.
            case ChatCompletionRequestMessageContentPartImage(Components.Schemas.ChatCompletionRequestMessageContentPartImage)
            /// - Remark: Generated from `#/components/schemas/ChatCompletionRequestUserMessageContentPart/case3`.
            case ChatCompletionRequestMessageContentPartAudio(Components.Schemas.ChatCompletionRequestMessageContentPartAudio)
            internal init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .ChatCompletionRequestMessageContentPartText(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .ChatCompletionRequestMessageContentPartImage(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .ChatCompletionRequestMessageContentPartAudio(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            internal func encode(to encoder: any Encoder) throws {
                switch self {
                case let .ChatCompletionRequestMessageContentPartText(value):
                    try value.encode(to: encoder)
                case let .ChatCompletionRequestMessageContentPartImage(value):
                    try value.encode(to: encoder)
                case let .ChatCompletionRequestMessageContentPartAudio(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// A chat completion message generated by the model.
        ///
        /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage`.
        internal struct ChatCompletionResponseMessage: Codable, Hashable, Sendable {
            /// The contents of the message.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/content`.
            internal var content: Swift.String?
            /// The refusal message generated by the model.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/refusal`.
            internal var refusal: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/tool_calls`.
            internal var tool_calls: Components.Schemas.ChatCompletionMessageToolCalls?
            /// The role of the author of this message.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/role`.
            internal enum rolePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case assistant = "assistant"
            }
            /// The role of the author of this message.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/role`.
            internal var role: Components.Schemas.ChatCompletionResponseMessage.rolePayload
            /// Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/function_call`.
            @available(*, deprecated)
            internal struct function_callPayload: Codable, Hashable, Sendable {
                /// The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/function_call/arguments`.
                internal var arguments: Swift.String
                /// The name of the function to call.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/function_call/name`.
                internal var name: Swift.String
                /// Creates a new `function_callPayload`.
                ///
                /// - Parameters:
                ///   - arguments: The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
                ///   - name: The name of the function to call.
                internal init(
                    arguments: Swift.String,
                    name: Swift.String
                ) {
                    self.arguments = arguments
                    self.name = name
                }
                internal enum CodingKeys: String, CodingKey {
                    case arguments
                    case name
                }
            }
            /// Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/function_call`.
            @available(*, deprecated)
            internal var function_call: Components.Schemas.ChatCompletionResponseMessage.function_callPayload?
            /// If the audio output modality is requested, this object contains data
            /// about the audio response from the model. [Learn more](/docs/guides/audio).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/audio`.
            internal struct audioPayload: Codable, Hashable, Sendable {
                /// Unique identifier for this audio response.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/audio/id`.
                internal var id: Swift.String
                /// The Unix timestamp (in seconds) for when this audio response will
                /// no longer be accessible on the server for use in multi-turn
                /// conversations.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/audio/expires_at`.
                internal var expires_at: Swift.Int
                /// Base64 encoded audio bytes generated by the model, in the format
                /// specified in the request.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/audio/data`.
                internal var data: Swift.String
                /// Transcript of the audio generated by the model.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/audio/transcript`.
                internal var transcript: Swift.String
                /// Creates a new `audioPayload`.
                ///
                /// - Parameters:
                ///   - id: Unique identifier for this audio response.
                ///   - expires_at: The Unix timestamp (in seconds) for when this audio response will
                ///   - data: Base64 encoded audio bytes generated by the model, in the format
                ///   - transcript: Transcript of the audio generated by the model.
                internal init(
                    id: Swift.String,
                    expires_at: Swift.Int,
                    data: Swift.String,
                    transcript: Swift.String
                ) {
                    self.id = id
                    self.expires_at = expires_at
                    self.data = data
                    self.transcript = transcript
                }
                internal enum CodingKeys: String, CodingKey {
                    case id
                    case expires_at
                    case data
                    case transcript
                }
            }
            /// If the audio output modality is requested, this object contains data
            /// about the audio response from the model. [Learn more](/docs/guides/audio).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionResponseMessage/audio`.
            internal var audio: Components.Schemas.ChatCompletionResponseMessage.audioPayload?
            /// Creates a new `ChatCompletionResponseMessage`.
            ///
            /// - Parameters:
            ///   - content: The contents of the message.
            ///   - refusal: The refusal message generated by the model.
            ///   - tool_calls:
            ///   - role: The role of the author of this message.
            ///   - function_call: Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
            ///   - audio: If the audio output modality is requested, this object contains data
            internal init(
                content: Swift.String? = nil,
                refusal: Swift.String? = nil,
                tool_calls: Components.Schemas.ChatCompletionMessageToolCalls? = nil,
                role: Components.Schemas.ChatCompletionResponseMessage.rolePayload,
                function_call: Components.Schemas.ChatCompletionResponseMessage.function_callPayload? = nil,
                audio: Components.Schemas.ChatCompletionResponseMessage.audioPayload? = nil
            ) {
                self.content = content
                self.refusal = refusal
                self.tool_calls = tool_calls
                self.role = role
                self.function_call = function_call
                self.audio = audio
            }
            internal enum CodingKeys: String, CodingKey {
                case content
                case refusal
                case tool_calls
                case role
                case function_call
                case audio
            }
        }
        /// Options for streaming response. Only set this when you set `stream: true`.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ChatCompletionStreamOptions`.
        internal struct ChatCompletionStreamOptions: Codable, Hashable, Sendable {
            /// If set, an additional chunk will be streamed before the `data: [DONE]` message. The `usage` field on this chunk shows the token usage statistics for the entire request, and the `choices` field will always be an empty array. All other chunks will also include a `usage` field, but with a null value.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionStreamOptions/include_usage`.
            internal var include_usage: Swift.Bool?
            /// Creates a new `ChatCompletionStreamOptions`.
            ///
            /// - Parameters:
            ///   - include_usage: If set, an additional chunk will be streamed before the `data: [DONE]` message. The `usage` field on this chunk shows the token usage statistics for the entire request, and the `choices` field will always be an empty array. All other chunks will also include a `usage` field, but with a null value.
            internal init(include_usage: Swift.Bool? = nil) {
                self.include_usage = include_usage
            }
            internal enum CodingKeys: String, CodingKey {
                case include_usage
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatCompletionTokenLogprob`.
        internal struct ChatCompletionTokenLogprob: Codable, Hashable, Sendable {
            /// The token.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionTokenLogprob/token`.
            internal var token: Swift.String
            /// The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionTokenLogprob/logprob`.
            internal var logprob: Swift.Double
            /// A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionTokenLogprob/bytes`.
            internal var bytes: [Swift.Int]?
            /// - Remark: Generated from `#/components/schemas/ChatCompletionTokenLogprob/top_logprobsPayload`.
            internal struct top_logprobsPayloadPayload: Codable, Hashable, Sendable {
                /// The token.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionTokenLogprob/top_logprobsPayload/token`.
                internal var token: Swift.String
                /// The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionTokenLogprob/top_logprobsPayload/logprob`.
                internal var logprob: Swift.Double
                /// A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
                ///
                /// - Remark: Generated from `#/components/schemas/ChatCompletionTokenLogprob/top_logprobsPayload/bytes`.
                internal var bytes: [Swift.Int]?
                /// Creates a new `top_logprobsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - token: The token.
                ///   - logprob: The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.
                ///   - bytes: A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
                internal init(
                    token: Swift.String,
                    logprob: Swift.Double,
                    bytes: [Swift.Int]? = nil
                ) {
                    self.token = token
                    self.logprob = logprob
                    self.bytes = bytes
                }
                internal enum CodingKeys: String, CodingKey {
                    case token
                    case logprob
                    case bytes
                }
            }
            /// List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionTokenLogprob/top_logprobs`.
            internal typealias top_logprobsPayload = [Components.Schemas.ChatCompletionTokenLogprob.top_logprobsPayloadPayload]
            /// List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionTokenLogprob/top_logprobs`.
            internal var top_logprobs: Components.Schemas.ChatCompletionTokenLogprob.top_logprobsPayload
            /// Creates a new `ChatCompletionTokenLogprob`.
            ///
            /// - Parameters:
            ///   - token: The token.
            ///   - logprob: The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.
            ///   - bytes: A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
            ///   - top_logprobs: List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned.
            internal init(
                token: Swift.String,
                logprob: Swift.Double,
                bytes: [Swift.Int]? = nil,
                top_logprobs: Components.Schemas.ChatCompletionTokenLogprob.top_logprobsPayload
            ) {
                self.token = token
                self.logprob = logprob
                self.bytes = bytes
                self.top_logprobs = top_logprobs
            }
            internal enum CodingKeys: String, CodingKey {
                case token
                case logprob
                case bytes
                case top_logprobs
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatCompletionTool`.
        internal struct ChatCompletionTool: Codable, Hashable, Sendable {
            /// The type of the tool. Currently, only `function` is supported.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionTool/type`.
            internal enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case function = "function"
            }
            /// The type of the tool. Currently, only `function` is supported.
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionTool/type`.
            internal var _type: Components.Schemas.ChatCompletionTool._typePayload
            /// - Remark: Generated from `#/components/schemas/ChatCompletionTool/function`.
            internal var function: Components.Schemas.FunctionObject
            /// Creates a new `ChatCompletionTool`.
            ///
            /// - Parameters:
            ///   - _type: The type of the tool. Currently, only `function` is supported.
            ///   - function:
            internal init(
                _type: Components.Schemas.ChatCompletionTool._typePayload,
                function: Components.Schemas.FunctionObject
            ) {
                self._type = _type
                self.function = function
            }
            internal enum CodingKeys: String, CodingKey {
                case _type = "type"
                case function
            }
        }
        /// Controls which (if any) tool is called by the model.
        /// `none` means the model will not call any tool and instead generates a message.
        /// `auto` means the model can pick between generating a message or calling one or more tools.
        /// `required` means the model must call one or more tools.
        /// Specifying a particular tool via `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that tool.
        ///
        /// `none` is the default when no tools are present. `auto` is the default if tools are present.
        ///
        ///
        /// - Remark: Generated from `#/components/schemas/ChatCompletionToolChoiceOption`.
        internal enum ChatCompletionToolChoiceOption: Codable, Hashable, Sendable {
            /// `none` means the model will not call any tool and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionToolChoiceOption/case1`.
            internal enum Case1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                case none = "none"
                case auto = "auto"
                case required = "required"
            }
            /// `none` means the model will not call any tool and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/ChatCompletionToolChoiceOption/case1`.
            case case1(Components.Schemas.ChatCompletionToolChoiceOption.Case1Payload)
            /// - Remark: Generated from `#/components/schemas/ChatCompletionToolChoiceOption/case2`.
            case ChatCompletionNamedToolChoice(Components.Schemas.ChatCompletionNamedToolChoice)
            internal init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .case1(try decoder.decodeFromSingleValueContainer())
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .ChatCompletionNamedToolChoice(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            internal func encode(to encoder: any Encoder) throws {
                switch self {
                case let .case1(value):
                    try encoder.encodeToSingleValueContainer(value)
                case let .ChatCompletionNamedToolChoice(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// Usage statistics for the completion request.
        ///
        /// - Remark: Generated from `#/components/schemas/CompletionUsage`.
        internal struct CompletionUsage: Codable, Hashable, Sendable {
            /// Number of tokens in the generated completion.
            ///
            /// - Remark: Generated from `#/components/schemas/CompletionUsage/completion_tokens`.
            internal var completion_tokens: Swift.Int
            /// Number of tokens in the prompt.
            ///
            /// - Remark: Generated from `#/components/schemas/CompletionUsage/prompt_tokens`.
            internal var prompt_tokens: Swift.Int
            /// Total number of tokens used in the request (prompt + completion).
            ///
            /// - Remark: Generated from `#/components/schemas/CompletionUsage/total_tokens`.
            internal var total_tokens: Swift.Int
            /// Breakdown of tokens used in a completion.
            ///
            /// - Remark: Generated from `#/components/schemas/CompletionUsage/completion_tokens_details`.
            internal struct completion_tokens_detailsPayload: Codable, Hashable, Sendable {
                /// Audio input tokens generated by the model.
                ///
                /// - Remark: Generated from `#/components/schemas/CompletionUsage/completion_tokens_details/audio_tokens`.
                internal var audio_tokens: Swift.Int?
                /// Tokens generated by the model for reasoning.
                ///
                /// - Remark: Generated from `#/components/schemas/CompletionUsage/completion_tokens_details/reasoning_tokens`.
                internal var reasoning_tokens: Swift.Int?
                /// Creates a new `completion_tokens_detailsPayload`.
                ///
                /// - Parameters:
                ///   - audio_tokens: Audio input tokens generated by the model.
                ///   - reasoning_tokens: Tokens generated by the model for reasoning.
                internal init(
                    audio_tokens: Swift.Int? = nil,
                    reasoning_tokens: Swift.Int? = nil
                ) {
                    self.audio_tokens = audio_tokens
                    self.reasoning_tokens = reasoning_tokens
                }
                internal enum CodingKeys: String, CodingKey {
                    case audio_tokens
                    case reasoning_tokens
                }
            }
            /// Breakdown of tokens used in a completion.
            ///
            /// - Remark: Generated from `#/components/schemas/CompletionUsage/completion_tokens_details`.
            internal var completion_tokens_details: Components.Schemas.CompletionUsage.completion_tokens_detailsPayload?
            /// Breakdown of tokens used in the prompt.
            ///
            /// - Remark: Generated from `#/components/schemas/CompletionUsage/prompt_tokens_details`.
            internal struct prompt_tokens_detailsPayload: Codable, Hashable, Sendable {
                /// Audio input tokens present in the prompt.
                ///
                /// - Remark: Generated from `#/components/schemas/CompletionUsage/prompt_tokens_details/audio_tokens`.
                internal var audio_tokens: Swift.Int?
                /// Cached tokens present in the prompt.
                ///
                /// - Remark: Generated from `#/components/schemas/CompletionUsage/prompt_tokens_details/cached_tokens`.
                internal var cached_tokens: Swift.Int?
                /// Creates a new `prompt_tokens_detailsPayload`.
                ///
                /// - Parameters:
                ///   - audio_tokens: Audio input tokens present in the prompt.
                ///   - cached_tokens: Cached tokens present in the prompt.
                internal init(
                    audio_tokens: Swift.Int? = nil,
                    cached_tokens: Swift.Int? = nil
                ) {
                    self.audio_tokens = audio_tokens
                    self.cached_tokens = cached_tokens
                }
                internal enum CodingKeys: String, CodingKey {
                    case audio_tokens
                    case cached_tokens
                }
            }
            /// Breakdown of tokens used in the prompt.
            ///
            /// - Remark: Generated from `#/components/schemas/CompletionUsage/prompt_tokens_details`.
            internal var prompt_tokens_details: Components.Schemas.CompletionUsage.prompt_tokens_detailsPayload?
            /// Creates a new `CompletionUsage`.
            ///
            /// - Parameters:
            ///   - completion_tokens: Number of tokens in the generated completion.
            ///   - prompt_tokens: Number of tokens in the prompt.
            ///   - total_tokens: Total number of tokens used in the request (prompt + completion).
            ///   - completion_tokens_details: Breakdown of tokens used in a completion.
            ///   - prompt_tokens_details: Breakdown of tokens used in the prompt.
            internal init(
                completion_tokens: Swift.Int,
                prompt_tokens: Swift.Int,
                total_tokens: Swift.Int,
                completion_tokens_details: Components.Schemas.CompletionUsage.completion_tokens_detailsPayload? = nil,
                prompt_tokens_details: Components.Schemas.CompletionUsage.prompt_tokens_detailsPayload? = nil
            ) {
                self.completion_tokens = completion_tokens
                self.prompt_tokens = prompt_tokens
                self.total_tokens = total_tokens
                self.completion_tokens_details = completion_tokens_details
                self.prompt_tokens_details = prompt_tokens_details
            }
            internal enum CodingKeys: String, CodingKey {
                case completion_tokens
                case prompt_tokens
                case total_tokens
                case completion_tokens_details
                case prompt_tokens_details
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest`.
        internal struct CreateChatCompletionRequest: Codable, Hashable, Sendable {
            /// A list of messages comprising the conversation so far. Depending on the
            /// [model](/docs/models) you use, different message types (modalities) are
            /// supported, like [text](/docs/guides/text-generation),
            /// [images](/docs/guides/vision), and [audio](/docs/guides/audio).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/messages`.
            internal var messages: [Components.Schemas.ChatCompletionRequestMessage]
            /// ID of the model to use. See the [model endpoint compatibility](/docs/models/model-endpoint-compatibility) table for details on which models work with the Chat API.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/model`.
            internal struct modelPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/model/value1`.
                internal var value1: Swift.String?
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/model/value2`.
                internal enum Value2Payload: String, Codable, Hashable, Sendable, CaseIterable {
                    case o1_hyphen_preview = "o1-preview"
                    case o1_hyphen_preview_hyphen_2024_hyphen_09_hyphen_12 = "o1-preview-2024-09-12"
                    case o1_hyphen_mini = "o1-mini"
                    case o1_hyphen_mini_hyphen_2024_hyphen_09_hyphen_12 = "o1-mini-2024-09-12"
                    case gpt_hyphen_4o = "gpt-4o"
                    case gpt_hyphen_4o_hyphen_2024_hyphen_08_hyphen_06 = "gpt-4o-2024-08-06"
                    case gpt_hyphen_4o_hyphen_2024_hyphen_05_hyphen_13 = "gpt-4o-2024-05-13"
                    case gpt_hyphen_4o_hyphen_2024_hyphen_08_hyphen_06 = "gpt-4o-2024-08-06"
                    case gpt_hyphen_4o_hyphen_realtime_hyphen_preview = "gpt-4o-realtime-preview"
                    case gpt_hyphen_4o_hyphen_realtime_hyphen_preview_hyphen_2024_hyphen_10_hyphen_01 = "gpt-4o-realtime-preview-2024-10-01"
                    case gpt_hyphen_4o_hyphen_audio_hyphen_preview = "gpt-4o-audio-preview"
                    case gpt_hyphen_4o_hyphen_audio_hyphen_preview_hyphen_2024_hyphen_10_hyphen_01 = "gpt-4o-audio-preview-2024-10-01"
                    case chatgpt_hyphen_4o_hyphen_latest = "chatgpt-4o-latest"
                    case gpt_hyphen_4o_hyphen_mini = "gpt-4o-mini"
                    case gpt_hyphen_4o_hyphen_mini_hyphen_2024_hyphen_07_hyphen_18 = "gpt-4o-mini-2024-07-18"
                    case gpt_hyphen_4_hyphen_turbo = "gpt-4-turbo"
                    case gpt_hyphen_4_hyphen_turbo_hyphen_2024_hyphen_04_hyphen_09 = "gpt-4-turbo-2024-04-09"
                    case gpt_hyphen_4_hyphen_0125_hyphen_preview = "gpt-4-0125-preview"
                    case gpt_hyphen_4_hyphen_turbo_hyphen_preview = "gpt-4-turbo-preview"
                    case gpt_hyphen_4_hyphen_1106_hyphen_preview = "gpt-4-1106-preview"
                    case gpt_hyphen_4_hyphen_vision_hyphen_preview = "gpt-4-vision-preview"
                    case gpt_hyphen_4 = "gpt-4"
                    case gpt_hyphen_4_hyphen_0314 = "gpt-4-0314"
                    case gpt_hyphen_4_hyphen_0613 = "gpt-4-0613"
                    case gpt_hyphen_4_hyphen_32k = "gpt-4-32k"
                    case gpt_hyphen_4_hyphen_32k_hyphen_0314 = "gpt-4-32k-0314"
                    case gpt_hyphen_4_hyphen_32k_hyphen_0613 = "gpt-4-32k-0613"
                    case gpt_hyphen_3_period_5_hyphen_turbo = "gpt-3.5-turbo"
                    case gpt_hyphen_3_period_5_hyphen_turbo_hyphen_16k = "gpt-3.5-turbo-16k"
                    case gpt_hyphen_3_period_5_hyphen_turbo_hyphen_0301 = "gpt-3.5-turbo-0301"
                    case gpt_hyphen_3_period_5_hyphen_turbo_hyphen_0613 = "gpt-3.5-turbo-0613"
                    case gpt_hyphen_3_period_5_hyphen_turbo_hyphen_1106 = "gpt-3.5-turbo-1106"
                    case gpt_hyphen_3_period_5_hyphen_turbo_hyphen_0125 = "gpt-3.5-turbo-0125"
                    case gpt_hyphen_3_period_5_hyphen_turbo_hyphen_16k_hyphen_0613 = "gpt-3.5-turbo-16k-0613"
                }
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/model/value2`.
                internal var value2: Components.Schemas.CreateChatCompletionRequest.modelPayload.Value2Payload?
                /// Creates a new `modelPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                internal init(
                    value1: Swift.String? = nil,
                    value2: Components.Schemas.CreateChatCompletionRequest.modelPayload.Value2Payload? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                internal init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value2 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            value1,
                            value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        value1,
                        value2
                    ])
                }
            }
            /// ID of the model to use. See the [model endpoint compatibility](/docs/models/model-endpoint-compatibility) table for details on which models work with the Chat API.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/model`.
            internal var model: Components.Schemas.CreateChatCompletionRequest.modelPayload
            /// Whether or not to store the output of this chat completion request
            /// for use in our [model distillation](/docs/guides/distillation) or [evals](/docs/guides/evals) products.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/store`.
            internal var store: Swift.Bool?
            /// Developer-defined tags and values used for filtering completions
            /// in the [dashboard](https://platform.openai.com/chat-completions).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/metadata`.
            internal struct metadataPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.String]
                /// Creates a new `metadataPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Developer-defined tags and values used for filtering completions
            /// in the [dashboard](https://platform.openai.com/chat-completions).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/metadata`.
            internal var metadata: Components.Schemas.CreateChatCompletionRequest.metadataPayload?
            /// Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
            ///
            /// [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/frequency_penalty`.
            internal var frequency_penalty: Swift.Double?
            /// Modify the likelihood of specified tokens appearing in the completion.
            ///
            /// Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/logit_bias`.
            internal struct logit_biasPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                internal var additionalProperties: [String: Swift.Int]
                /// Creates a new `logit_biasPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                internal init(additionalProperties: [String: Swift.Int] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                internal init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// Modify the likelihood of specified tokens appearing in the completion.
            ///
            /// Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/logit_bias`.
            internal var logit_bias: Components.Schemas.CreateChatCompletionRequest.logit_biasPayload?
            /// Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/logprobs`.
            internal var logprobs: Swift.Bool?
            /// An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/top_logprobs`.
            internal var top_logprobs: Swift.Int?
            /// The maximum number of [tokens](/tokenizer) that can be generated in the chat completion. This value can be used to control [costs](https://openai.com/api/pricing/) for text generated via API.
            ///
            /// This value is now deprecated in favor of `max_completion_tokens`, and is not compatible with [o1 series models](/docs/guides/reasoning).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/max_tokens`.
            @available(*, deprecated)
            internal var max_tokens: Swift.Int?
            /// An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and [reasoning tokens](/docs/guides/reasoning).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/max_completion_tokens`.
            internal var max_completion_tokens: Swift.Int?
            /// How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/n`.
            internal var n: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/modalities`.
            internal var modalities: Components.Schemas.ChatCompletionModalities?
            /// Parameters for audio output. Required when audio output is requested with
            /// `modalities: ["audio"]`. [Learn more](/docs/guides/audio).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/audio`.
            internal struct audioPayload: Codable, Hashable, Sendable {
                /// Specifies the voice type. Supported voices are `alloy`, `echo`,
                /// `fable`, `onyx`, `nova`, and `shimmer`.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/audio/voice`.
                internal enum voicePayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case alloy = "alloy"
                    case echo = "echo"
                    case fable = "fable"
                    case onyx = "onyx"
                    case nova = "nova"
                    case shimmer = "shimmer"
                }
                /// Specifies the voice type. Supported voices are `alloy`, `echo`,
                /// `fable`, `onyx`, `nova`, and `shimmer`.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/audio/voice`.
                internal var voice: Components.Schemas.CreateChatCompletionRequest.audioPayload.voicePayload
                /// Specifies the output audio format. Must be one of `wav`, `mp3`, `flac`,
                /// `opus`, or `pcm16`.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/audio/format`.
                internal enum formatPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case wav = "wav"
                    case mp3 = "mp3"
                    case flac = "flac"
                    case opus = "opus"
                    case pcm16 = "pcm16"
                }
                /// Specifies the output audio format. Must be one of `wav`, `mp3`, `flac`,
                /// `opus`, or `pcm16`.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/audio/format`.
                internal var format: Components.Schemas.CreateChatCompletionRequest.audioPayload.formatPayload
                /// Creates a new `audioPayload`.
                ///
                /// - Parameters:
                ///   - voice: Specifies the voice type. Supported voices are `alloy`, `echo`,
                ///   - format: Specifies the output audio format. Must be one of `wav`, `mp3`, `flac`,
                internal init(
                    voice: Components.Schemas.CreateChatCompletionRequest.audioPayload.voicePayload,
                    format: Components.Schemas.CreateChatCompletionRequest.audioPayload.formatPayload
                ) {
                    self.voice = voice
                    self.format = format
                }
                internal enum CodingKeys: String, CodingKey {
                    case voice
                    case format
                }
            }
            /// Parameters for audio output. Required when audio output is requested with
            /// `modalities: ["audio"]`. [Learn more](/docs/guides/audio).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/audio`.
            internal var audio: Components.Schemas.CreateChatCompletionRequest.audioPayload?
            /// Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
            ///
            /// [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/presence_penalty`.
            internal var presence_penalty: Swift.Double?
            /// An object specifying the format that the model must output. Compatible with [GPT-4o](/docs/models/gpt-4o), [GPT-4o mini](/docs/models/gpt-4o-mini), [GPT-4 Turbo](/docs/models/gpt-4-and-gpt-4-turbo) and all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.
            ///
            /// Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).
            ///
            /// Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
            ///
            /// **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/response_format`.
            internal enum response_formatPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/response_format/case1`.
                case ResponseFormatText(Components.Schemas.ResponseFormatText)
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/response_format/case2`.
                case ResponseFormatJsonObject(Components.Schemas.ResponseFormatJsonObject)
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/response_format/case3`.
                case ResponseFormatJsonSchema(Components.Schemas.ResponseFormatJsonSchema)
                internal init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .ResponseFormatText(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .ResponseFormatJsonObject(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .ResponseFormatJsonSchema(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                internal func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .ResponseFormatText(value):
                        try value.encode(to: encoder)
                    case let .ResponseFormatJsonObject(value):
                        try value.encode(to: encoder)
                    case let .ResponseFormatJsonSchema(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// An object specifying the format that the model must output. Compatible with [GPT-4o](/docs/models/gpt-4o), [GPT-4o mini](/docs/models/gpt-4o-mini), [GPT-4 Turbo](/docs/models/gpt-4-and-gpt-4-turbo) and all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.
            ///
            /// Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).
            ///
            /// Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
            ///
            /// **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/response_format`.
            internal var response_format: Components.Schemas.CreateChatCompletionRequest.response_formatPayload?
            /// This feature is in Beta.
            /// If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.
            /// Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/seed`.
            internal var seed: Swift.Int?
            /// Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service:
            ///   - If set to 'auto', and the Project is Scale tier enabled, the system will utilize scale tier credits until they are exhausted.
            ///   - If set to 'auto', and the Project is not Scale tier enabled, the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.
            ///   - If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.
            ///   - When not set, the default behavior is 'auto'.
            ///
            ///   When this parameter is set, the response body will include the `service_tier` utilized.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/service_tier`.
            internal enum service_tierPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case auto = "auto"
                case _default = "default"
            }
            /// Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service:
            ///   - If set to 'auto', and the Project is Scale tier enabled, the system will utilize scale tier credits until they are exhausted.
            ///   - If set to 'auto', and the Project is not Scale tier enabled, the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.
            ///   - If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.
            ///   - When not set, the default behavior is 'auto'.
            ///
            ///   When this parameter is set, the response body will include the `service_tier` utilized.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/service_tier`.
            internal var service_tier: Components.Schemas.CreateChatCompletionRequest.service_tierPayload?
            /// Up to 4 sequences where the API will stop generating further tokens.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/stop`.
            internal enum stopPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/stop/case1`.
                case case1(Swift.String?)
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/stop/case2`.
                case case2([Swift.String])
                internal init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                internal func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .case2(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// Up to 4 sequences where the API will stop generating further tokens.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/stop`.
            internal var stop: Components.Schemas.CreateChatCompletionRequest.stopPayload?
            /// If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/stream`.
            internal var stream: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/stream_options`.
            internal var stream_options: Components.Schemas.ChatCompletionStreamOptions?
            /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
            ///
            /// We generally recommend altering this or `top_p` but not both.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/temperature`.
            internal var temperature: Swift.Double?
            /// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
            ///
            /// We generally recommend altering this or `temperature` but not both.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/top_p`.
            internal var top_p: Swift.Double?
            /// A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/tools`.
            internal var tools: [Components.Schemas.ChatCompletionTool]?
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/tool_choice`.
            internal var tool_choice: Components.Schemas.ChatCompletionToolChoiceOption?
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/parallel_tool_calls`.
            internal var parallel_tool_calls: Components.Schemas.ParallelToolCalls?
            /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/user`.
            internal var user: Swift.String?
            /// Deprecated in favor of `tool_choice`.
            ///
            /// Controls which (if any) function is called by the model.
            /// `none` means the model will not call a function and instead generates a message.
            /// `auto` means the model can pick between generating a message or calling a function.
            /// Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.
            ///
            /// `none` is the default when no functions are present. `auto` is the default if functions are present.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/function_call`.
            internal enum function_callPayload: Codable, Hashable, Sendable {
                /// `none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/function_call/case1`.
                internal enum Case1Payload: String, Codable, Hashable, Sendable, CaseIterable {
                    case none = "none"
                    case auto = "auto"
                }
                /// `none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/function_call/case1`.
                case case1(Components.Schemas.CreateChatCompletionRequest.function_callPayload.Case1Payload)
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/function_call/case2`.
                case ChatCompletionFunctionCallOption(Components.Schemas.ChatCompletionFunctionCallOption)
                internal init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .ChatCompletionFunctionCallOption(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                internal func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .ChatCompletionFunctionCallOption(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// Deprecated in favor of `tool_choice`.
            ///
            /// Controls which (if any) function is called by the model.
            /// `none` means the model will not call a function and instead generates a message.
            /// `auto` means the model can pick between generating a message or calling a function.
            /// Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.
            ///
            /// `none` is the default when no functions are present. `auto` is the default if functions are present.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/function_call`.
            @available(*, deprecated)
            internal var function_call: Components.Schemas.CreateChatCompletionRequest.function_callPayload?
            /// Deprecated in favor of `tools`.
            ///
            /// A list of functions the model may generate JSON inputs for.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionRequest/functions`.
            @available(*, deprecated)
            internal var functions: [Components.Schemas.ChatCompletionFunctions]?
            /// Creates a new `CreateChatCompletionRequest`.
            ///
            /// - Parameters:
            ///   - messages: A list of messages comprising the conversation so far. Depending on the
            ///   - model: ID of the model to use. See the [model endpoint compatibility](/docs/models/model-endpoint-compatibility) table for details on which models work with the Chat API.
            ///   - store: Whether or not to store the output of this chat completion request
            ///   - metadata: Developer-defined tags and values used for filtering completions
            ///   - frequency_penalty: Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
            ///   - logit_bias: Modify the likelihood of specified tokens appearing in the completion.
            ///   - logprobs: Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`.
            ///   - top_logprobs: An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used.
            ///   - max_tokens: The maximum number of [tokens](/tokenizer) that can be generated in the chat completion. This value can be used to control [costs](https://openai.com/api/pricing/) for text generated via API.
            ///   - max_completion_tokens: An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and [reasoning tokens](/docs/guides/reasoning).
            ///   - n: How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
            ///   - modalities:
            ///   - audio: Parameters for audio output. Required when audio output is requested with
            ///   - presence_penalty: Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
            ///   - response_format: An object specifying the format that the model must output. Compatible with [GPT-4o](/docs/models/gpt-4o), [GPT-4o mini](/docs/models/gpt-4o-mini), [GPT-4 Turbo](/docs/models/gpt-4-and-gpt-4-turbo) and all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.
            ///   - seed: This feature is in Beta.
            ///   - service_tier: Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service:
            ///   - stop: Up to 4 sequences where the API will stop generating further tokens.
            ///   - stream: If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).
            ///   - stream_options:
            ///   - temperature: What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
            ///   - top_p: An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
            ///   - tools: A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.
            ///   - tool_choice:
            ///   - parallel_tool_calls:
            ///   - user: A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
            ///   - function_call: Deprecated in favor of `tool_choice`.
            ///   - functions: Deprecated in favor of `tools`.
            internal init(
                messages: [Components.Schemas.ChatCompletionRequestMessage],
                model: Components.Schemas.CreateChatCompletionRequest.modelPayload,
                store: Swift.Bool? = nil,
                metadata: Components.Schemas.CreateChatCompletionRequest.metadataPayload? = nil,
                frequency_penalty: Swift.Double? = nil,
                logit_bias: Components.Schemas.CreateChatCompletionRequest.logit_biasPayload? = nil,
                logprobs: Swift.Bool? = nil,
                top_logprobs: Swift.Int? = nil,
                max_tokens: Swift.Int? = nil,
                max_completion_tokens: Swift.Int? = nil,
                n: Swift.Int? = nil,
                modalities: Components.Schemas.ChatCompletionModalities? = nil,
                audio: Components.Schemas.CreateChatCompletionRequest.audioPayload? = nil,
                presence_penalty: Swift.Double? = nil,
                response_format: Components.Schemas.CreateChatCompletionRequest.response_formatPayload? = nil,
                seed: Swift.Int? = nil,
                service_tier: Components.Schemas.CreateChatCompletionRequest.service_tierPayload? = nil,
                stop: Components.Schemas.CreateChatCompletionRequest.stopPayload? = nil,
                stream: Swift.Bool? = nil,
                stream_options: Components.Schemas.ChatCompletionStreamOptions? = nil,
                temperature: Swift.Double? = nil,
                top_p: Swift.Double? = nil,
                tools: [Components.Schemas.ChatCompletionTool]? = nil,
                tool_choice: Components.Schemas.ChatCompletionToolChoiceOption? = nil,
                parallel_tool_calls: Components.Schemas.ParallelToolCalls? = nil,
                user: Swift.String? = nil,
                function_call: Components.Schemas.CreateChatCompletionRequest.function_callPayload? = nil,
                functions: [Components.Schemas.ChatCompletionFunctions]? = nil
            ) {
                self.messages = messages
                self.model = model
                self.store = store
                self.metadata = metadata
                self.frequency_penalty = frequency_penalty
                self.logit_bias = logit_bias
                self.logprobs = logprobs
                self.top_logprobs = top_logprobs
                self.max_tokens = max_tokens
                self.max_completion_tokens = max_completion_tokens
                self.n = n
                self.modalities = modalities
                self.audio = audio
                self.presence_penalty = presence_penalty
                self.response_format = response_format
                self.seed = seed
                self.service_tier = service_tier
                self.stop = stop
                self.stream = stream
                self.stream_options = stream_options
                self.temperature = temperature
                self.top_p = top_p
                self.tools = tools
                self.tool_choice = tool_choice
                self.parallel_tool_calls = parallel_tool_calls
                self.user = user
                self.function_call = function_call
                self.functions = functions
            }
            internal enum CodingKeys: String, CodingKey {
                case messages
                case model
                case store
                case metadata
                case frequency_penalty
                case logit_bias
                case logprobs
                case top_logprobs
                case max_tokens
                case max_completion_tokens
                case n
                case modalities
                case audio
                case presence_penalty
                case response_format
                case seed
                case service_tier
                case stop
                case stream
                case stream_options
                case temperature
                case top_p
                case tools
                case tool_choice
                case parallel_tool_calls
                case user
                case function_call
                case functions
            }
        }
        /// Represents a chat completion response returned by model, based on the provided input.
        ///
        /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse`.
        internal struct CreateChatCompletionResponse: Codable, Hashable, Sendable {
            /// A unique identifier for the chat completion.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/id`.
            internal var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/choicesPayload`.
            internal struct choicesPayloadPayload: Codable, Hashable, Sendable {
                /// The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
                /// `length` if the maximum number of tokens specified in the request was reached,
                /// `content_filter` if content was omitted due to a flag from our content filters,
                /// `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/choicesPayload/finish_reason`.
                internal enum finish_reasonPayload: String, Codable, Hashable, Sendable, CaseIterable {
                    case stop = "stop"
                    case length = "length"
                    case tool_calls = "tool_calls"
                    case content_filter = "content_filter"
                    case function_call = "function_call"
                }
                /// The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
                /// `length` if the maximum number of tokens specified in the request was reached,
                /// `content_filter` if content was omitted due to a flag from our content filters,
                /// `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
                ///
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/choicesPayload/finish_reason`.
                internal var finish_reason: Components.Schemas.CreateChatCompletionResponse.choicesPayloadPayload.finish_reasonPayload
                /// The index of the choice in the list of choices.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/choicesPayload/index`.
                internal var index: Swift.Int
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/choicesPayload/message`.
                internal var message: Components.Schemas.ChatCompletionResponseMessage
                /// Log probability information for the choice.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/choicesPayload/logprobs`.
                internal struct logprobsPayload: Codable, Hashable, Sendable {
                    /// A list of message content tokens with log probability information.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/choicesPayload/logprobs/content`.
                    internal var content: [Components.Schemas.ChatCompletionTokenLogprob]?
                    /// A list of message refusal tokens with log probability information.
                    ///
                    /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/choicesPayload/logprobs/refusal`.
                    internal var refusal: [Components.Schemas.ChatCompletionTokenLogprob]?
                    /// Creates a new `logprobsPayload`.
                    ///
                    /// - Parameters:
                    ///   - content: A list of message content tokens with log probability information.
                    ///   - refusal: A list of message refusal tokens with log probability information.
                    internal init(
                        content: [Components.Schemas.ChatCompletionTokenLogprob]? = nil,
                        refusal: [Components.Schemas.ChatCompletionTokenLogprob]? = nil
                    ) {
                        self.content = content
                        self.refusal = refusal
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case content
                        case refusal
                    }
                }
                /// Log probability information for the choice.
                ///
                /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/choicesPayload/logprobs`.
                internal var logprobs: Components.Schemas.CreateChatCompletionResponse.choicesPayloadPayload.logprobsPayload?
                /// Creates a new `choicesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - finish_reason: The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
                ///   - index: The index of the choice in the list of choices.
                ///   - message:
                ///   - logprobs: Log probability information for the choice.
                internal init(
                    finish_reason: Components.Schemas.CreateChatCompletionResponse.choicesPayloadPayload.finish_reasonPayload,
                    index: Swift.Int,
                    message: Components.Schemas.ChatCompletionResponseMessage,
                    logprobs: Components.Schemas.CreateChatCompletionResponse.choicesPayloadPayload.logprobsPayload? = nil
                ) {
                    self.finish_reason = finish_reason
                    self.index = index
                    self.message = message
                    self.logprobs = logprobs
                }
                internal enum CodingKeys: String, CodingKey {
                    case finish_reason
                    case index
                    case message
                    case logprobs
                }
            }
            /// A list of chat completion choices. Can be more than one if `n` is greater than 1.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/choices`.
            internal typealias choicesPayload = [Components.Schemas.CreateChatCompletionResponse.choicesPayloadPayload]
            /// A list of chat completion choices. Can be more than one if `n` is greater than 1.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/choices`.
            internal var choices: Components.Schemas.CreateChatCompletionResponse.choicesPayload
            /// The Unix timestamp (in seconds) of when the chat completion was created.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/created`.
            internal var created: Swift.Int
            /// The model used for the chat completion.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/model`.
            internal var model: Swift.String
            /// The service tier used for processing the request. This field is only included if the `service_tier` parameter is specified in the request.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/service_tier`.
            internal enum service_tierPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case scale = "scale"
                case _default = "default"
            }
            /// The service tier used for processing the request. This field is only included if the `service_tier` parameter is specified in the request.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/service_tier`.
            internal var service_tier: Components.Schemas.CreateChatCompletionResponse.service_tierPayload?
            /// This fingerprint represents the backend configuration that the model runs with.
            ///
            /// Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/system_fingerprint`.
            internal var system_fingerprint: Swift.String?
            /// The object type, which is always `chat.completion`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/object`.
            internal enum objectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case chat_period_completion = "chat.completion"
            }
            /// The object type, which is always `chat.completion`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/object`.
            internal var object: Components.Schemas.CreateChatCompletionResponse.objectPayload
            /// - Remark: Generated from `#/components/schemas/CreateChatCompletionResponse/usage`.
            internal var usage: Components.Schemas.CompletionUsage?
            /// Creates a new `CreateChatCompletionResponse`.
            ///
            /// - Parameters:
            ///   - id: A unique identifier for the chat completion.
            ///   - choices: A list of chat completion choices. Can be more than one if `n` is greater than 1.
            ///   - created: The Unix timestamp (in seconds) of when the chat completion was created.
            ///   - model: The model used for the chat completion.
            ///   - service_tier: The service tier used for processing the request. This field is only included if the `service_tier` parameter is specified in the request.
            ///   - system_fingerprint: This fingerprint represents the backend configuration that the model runs with.
            ///   - object: The object type, which is always `chat.completion`.
            ///   - usage:
            internal init(
                id: Swift.String,
                choices: Components.Schemas.CreateChatCompletionResponse.choicesPayload,
                created: Swift.Int,
                model: Swift.String,
                service_tier: Components.Schemas.CreateChatCompletionResponse.service_tierPayload? = nil,
                system_fingerprint: Swift.String? = nil,
                object: Components.Schemas.CreateChatCompletionResponse.objectPayload,
                usage: Components.Schemas.CompletionUsage? = nil
            ) {
                self.id = id
                self.choices = choices
                self.created = created
                self.model = model
                self.service_tier = service_tier
                self.system_fingerprint = system_fingerprint
                self.object = object
                self.usage = usage
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case choices
                case created
                case model
                case service_tier
                case system_fingerprint
                case object
                case usage
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateImageEditRequest`.
        internal enum CreateImageEditRequest: Sendable, Hashable {
            /// - Remark: Generated from `#/components/schemas/CreateImageEditRequest/image`.
            internal struct imagePayload: Sendable, Hashable {
                internal var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `imagePayload`.
                ///
                /// - Parameters:
                ///   - body:
                internal init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case image(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateImageEditRequest.imagePayload>)
            /// - Remark: Generated from `#/components/schemas/CreateImageEditRequest/prompt`.
            internal struct promptPayload: Sendable, Hashable {
                internal var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `promptPayload`.
                ///
                /// - Parameters:
                ///   - body:
                internal init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case prompt(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateImageEditRequest.promptPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateImageEditRequest/mask`.
            internal struct maskPayload: Sendable, Hashable {
                internal var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `maskPayload`.
                ///
                /// - Parameters:
                ///   - body:
                internal init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case mask(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateImageEditRequest.maskPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateImageEditRequest/model`.
            internal struct modelPayload: Sendable, Hashable {
                internal var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `modelPayload`.
                ///
                /// - Parameters:
                ///   - body:
                internal init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case model(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateImageEditRequest.modelPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateImageEditRequest/n`.
            internal struct nPayload: Sendable, Hashable {
                internal var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `nPayload`.
                ///
                /// - Parameters:
                ///   - body:
                internal init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case n(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateImageEditRequest.nPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateImageEditRequest/size`.
            internal struct sizePayload: Sendable, Hashable {
                internal var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `sizePayload`.
                ///
                /// - Parameters:
                ///   - body:
                internal init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case size(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateImageEditRequest.sizePayload>)
            /// - Remark: Generated from `#/components/schemas/CreateImageEditRequest/response_format`.
            internal struct response_formatPayload: Sendable, Hashable {
                internal var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `response_formatPayload`.
                ///
                /// - Parameters:
                ///   - body:
                internal init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case response_format(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateImageEditRequest.response_formatPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateImageEditRequest/user`.
            internal struct userPayload: Sendable, Hashable {
                internal var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `userPayload`.
                ///
                /// - Parameters:
                ///   - body:
                internal init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case user(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateImageEditRequest.userPayload>)
            case undocumented(OpenAPIRuntime.MultipartRawPart)
        }
        /// - Remark: Generated from `#/components/schemas/CreateImageRequest`.
        internal struct CreateImageRequest: Codable, Hashable, Sendable {
            /// A text description of the desired image(s). The maximum length is 1000 characters for `dall-e-2` and 4000 characters for `dall-e-3`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/prompt`.
            internal var prompt: Swift.String
            /// The model to use for image generation.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/model`.
            internal struct modelPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateImageRequest/model/value1`.
                internal var value1: Swift.String?
                /// - Remark: Generated from `#/components/schemas/CreateImageRequest/model/value2`.
                internal enum Value2Payload: String, Codable, Hashable, Sendable, CaseIterable {
                    case dall_hyphen_e_hyphen_2 = "dall-e-2"
                    case dall_hyphen_e_hyphen_3 = "dall-e-3"
                }
                /// - Remark: Generated from `#/components/schemas/CreateImageRequest/model/value2`.
                internal var value2: Components.Schemas.CreateImageRequest.modelPayload.Value2Payload?
                /// Creates a new `modelPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                internal init(
                    value1: Swift.String? = nil,
                    value2: Components.Schemas.CreateImageRequest.modelPayload.Value2Payload? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                internal init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value2 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            value1,
                            value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        value1,
                        value2
                    ])
                }
            }
            /// The model to use for image generation.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/model`.
            internal var model: Components.Schemas.CreateImageRequest.modelPayload?
            /// The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/n`.
            internal var n: Swift.Int?
            /// The quality of the image that will be generated. `hd` creates images with finer details and greater consistency across the image. This param is only supported for `dall-e-3`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/quality`.
            internal enum qualityPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case standard = "standard"
                case hd = "hd"
            }
            /// The quality of the image that will be generated. `hd` creates images with finer details and greater consistency across the image. This param is only supported for `dall-e-3`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/quality`.
            internal var quality: Components.Schemas.CreateImageRequest.qualityPayload?
            /// The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/response_format`.
            internal enum response_formatPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case url = "url"
                case b64_json = "b64_json"
            }
            /// The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/response_format`.
            internal var response_format: Components.Schemas.CreateImageRequest.response_formatPayload?
            /// The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`. Must be one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3` models.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/size`.
            internal enum sizePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case _256x256 = "256x256"
                case _512x512 = "512x512"
                case _1024x1024 = "1024x1024"
                case _1792x1024 = "1792x1024"
                case _1024x1792 = "1024x1792"
            }
            /// The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`. Must be one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3` models.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/size`.
            internal var size: Components.Schemas.CreateImageRequest.sizePayload?
            /// The style of the generated images. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for `dall-e-3`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/style`.
            internal enum stylePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case vivid = "vivid"
                case natural = "natural"
            }
            /// The style of the generated images. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for `dall-e-3`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/style`.
            internal var style: Components.Schemas.CreateImageRequest.stylePayload?
            /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateImageRequest/user`.
            internal var user: Swift.String?
            /// Creates a new `CreateImageRequest`.
            ///
            /// - Parameters:
            ///   - prompt: A text description of the desired image(s). The maximum length is 1000 characters for `dall-e-2` and 4000 characters for `dall-e-3`.
            ///   - model: The model to use for image generation.
            ///   - n: The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.
            ///   - quality: The quality of the image that will be generated. `hd` creates images with finer details and greater consistency across the image. This param is only supported for `dall-e-3`.
            ///   - response_format: The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
            ///   - size: The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`. Must be one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3` models.
            ///   - style: The style of the generated images. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for `dall-e-3`.
            ///   - user: A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
            internal init(
                prompt: Swift.String,
                model: Components.Schemas.CreateImageRequest.modelPayload? = nil,
                n: Swift.Int? = nil,
                quality: Components.Schemas.CreateImageRequest.qualityPayload? = nil,
                response_format: Components.Schemas.CreateImageRequest.response_formatPayload? = nil,
                size: Components.Schemas.CreateImageRequest.sizePayload? = nil,
                style: Components.Schemas.CreateImageRequest.stylePayload? = nil,
                user: Swift.String? = nil
            ) {
                self.prompt = prompt
                self.model = model
                self.n = n
                self.quality = quality
                self.response_format = response_format
                self.size = size
                self.style = style
                self.user = user
            }
            internal enum CodingKeys: String, CodingKey {
                case prompt
                case model
                case n
                case quality
                case response_format
                case size
                case style
                case user
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateImageVariationRequest`.
        internal enum CreateImageVariationRequest: Sendable, Hashable {
            /// - Remark: Generated from `#/components/schemas/CreateImageVariationRequest/image`.
            internal struct imagePayload: Sendable, Hashable {
                internal var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `imagePayload`.
                ///
                /// - Parameters:
                ///   - body:
                internal init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case image(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateImageVariationRequest.imagePayload>)
            /// - Remark: Generated from `#/components/schemas/CreateImageVariationRequest/model`.
            internal struct modelPayload: Sendable, Hashable {
                internal var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `modelPayload`.
                ///
                /// - Parameters:
                ///   - body:
                internal init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case model(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateImageVariationRequest.modelPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateImageVariationRequest/n`.
            internal struct nPayload: Sendable, Hashable {
                internal var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `nPayload`.
                ///
                /// - Parameters:
                ///   - body:
                internal init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case n(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateImageVariationRequest.nPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateImageVariationRequest/response_format`.
            internal struct response_formatPayload: Sendable, Hashable {
                internal var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `response_formatPayload`.
                ///
                /// - Parameters:
                ///   - body:
                internal init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case response_format(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateImageVariationRequest.response_formatPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateImageVariationRequest/size`.
            internal struct sizePayload: Sendable, Hashable {
                internal var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `sizePayload`.
                ///
                /// - Parameters:
                ///   - body:
                internal init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case size(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateImageVariationRequest.sizePayload>)
            /// - Remark: Generated from `#/components/schemas/CreateImageVariationRequest/user`.
            internal struct userPayload: Sendable, Hashable {
                internal var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `userPayload`.
                ///
                /// - Parameters:
                ///   - body:
                internal init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case user(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateImageVariationRequest.userPayload>)
            case undocumented(OpenAPIRuntime.MultipartRawPart)
        }
        /// - Remark: Generated from `#/components/schemas/CreateSpeechRequest`.
        internal struct CreateSpeechRequest: Codable, Hashable, Sendable {
            /// One of the available [TTS models](/docs/models/tts): `tts-1` or `tts-1-hd`
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateSpeechRequest/model`.
            internal struct modelPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CreateSpeechRequest/model/value1`.
                internal var value1: Swift.String?
                /// - Remark: Generated from `#/components/schemas/CreateSpeechRequest/model/value2`.
                internal enum Value2Payload: String, Codable, Hashable, Sendable, CaseIterable {
                    case tts_hyphen_1 = "tts-1"
                    case tts_hyphen_1_hyphen_hd = "tts-1-hd"
                }
                /// - Remark: Generated from `#/components/schemas/CreateSpeechRequest/model/value2`.
                internal var value2: Components.Schemas.CreateSpeechRequest.modelPayload.Value2Payload?
                /// Creates a new `modelPayload`.
                ///
                /// - Parameters:
                ///   - value1:
                ///   - value2:
                internal init(
                    value1: Swift.String? = nil,
                    value2: Components.Schemas.CreateSpeechRequest.modelPayload.Value2Payload? = nil
                ) {
                    self.value1 = value1
                    self.value2 = value2
                }
                internal init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        value1 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    do {
                        value2 = try decoder.decodeFromSingleValueContainer()
                    } catch {
                        errors.append(error)
                    }
                    try Swift.DecodingError.verifyAtLeastOneSchemaIsNotNil(
                        [
                            value1,
                            value2
                        ],
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                internal func encode(to encoder: any Encoder) throws {
                    try encoder.encodeFirstNonNilValueToSingleValueContainer([
                        value1,
                        value2
                    ])
                }
            }
            /// One of the available [TTS models](/docs/models/tts): `tts-1` or `tts-1-hd`
            ///
            ///
            /// - Remark: Generated from `#/components/schemas/CreateSpeechRequest/model`.
            internal var model: Components.Schemas.CreateSpeechRequest.modelPayload
            /// The text to generate audio for. The maximum length is 4096 characters.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateSpeechRequest/input`.
            internal var input: Swift.String
            /// The voice to use when generating the audio. Supported voices are `alloy`, `echo`, `fable`, `onyx`, `nova`, and `shimmer`. Previews of the voices are available in the [Text to speech guide](/docs/guides/text-to-speech/voice-options).
            ///
            /// - Remark: Generated from `#/components/schemas/CreateSpeechRequest/voice`.
            internal enum voicePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case alloy = "alloy"
                case echo = "echo"
                case fable = "fable"
                case onyx = "onyx"
                case nova = "nova"
                case shimmer = "shimmer"
            }
            /// The voice to use when generating the audio. Supported voices are `alloy`, `echo`, `fable`, `onyx`, `nova`, and `shimmer`. Previews of the voices are available in the [Text to speech guide](/docs/guides/text-to-speech/voice-options).
            ///
            /// - Remark: Generated from `#/components/schemas/CreateSpeechRequest/voice`.
            internal var voice: Components.Schemas.CreateSpeechRequest.voicePayload
            /// The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`, `wav`, and `pcm`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateSpeechRequest/response_format`.
            internal enum response_formatPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case mp3 = "mp3"
                case opus = "opus"
                case aac = "aac"
                case flac = "flac"
                case wav = "wav"
                case pcm = "pcm"
            }
            /// The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`, `wav`, and `pcm`.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateSpeechRequest/response_format`.
            internal var response_format: Components.Schemas.CreateSpeechRequest.response_formatPayload?
            /// The speed of the generated audio. Select a value from `0.25` to `4.0`. `1.0` is the default.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateSpeechRequest/speed`.
            internal var speed: Swift.Double?
            /// Creates a new `CreateSpeechRequest`.
            ///
            /// - Parameters:
            ///   - model: One of the available [TTS models](/docs/models/tts): `tts-1` or `tts-1-hd`
            ///   - input: The text to generate audio for. The maximum length is 4096 characters.
            ///   - voice: The voice to use when generating the audio. Supported voices are `alloy`, `echo`, `fable`, `onyx`, `nova`, and `shimmer`. Previews of the voices are available in the [Text to speech guide](/docs/guides/text-to-speech/voice-options).
            ///   - response_format: The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`, `wav`, and `pcm`.
            ///   - speed: The speed of the generated audio. Select a value from `0.25` to `4.0`. `1.0` is the default.
            internal init(
                model: Components.Schemas.CreateSpeechRequest.modelPayload,
                input: Swift.String,
                voice: Components.Schemas.CreateSpeechRequest.voicePayload,
                response_format: Components.Schemas.CreateSpeechRequest.response_formatPayload? = nil,
                speed: Swift.Double? = nil
            ) {
                self.model = model
                self.input = input
                self.voice = voice
                self.response_format = response_format
                self.speed = speed
            }
            internal enum CodingKeys: String, CodingKey {
                case model
                case input
                case voice
                case response_format
                case speed
            }
            internal init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                model = try container.decode(
                    Components.Schemas.CreateSpeechRequest.modelPayload.self,
                    forKey: .model
                )
                input = try container.decode(
                    Swift.String.self,
                    forKey: .input
                )
                voice = try container.decode(
                    Components.Schemas.CreateSpeechRequest.voicePayload.self,
                    forKey: .voice
                )
                response_format = try container.decodeIfPresent(
                    Components.Schemas.CreateSpeechRequest.response_formatPayload.self,
                    forKey: .response_format
                )
                speed = try container.decodeIfPresent(
                    Swift.Double.self,
                    forKey: .speed
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "model",
                    "input",
                    "voice",
                    "response_format",
                    "speed"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateTranscriptionRequest`.
        internal enum CreateTranscriptionRequest: Sendable, Hashable {
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionRequest/file`.
            internal struct filePayload: Sendable, Hashable {
                internal var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `filePayload`.
                ///
                /// - Parameters:
                ///   - body:
                internal init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case file(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranscriptionRequest.filePayload>)
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionRequest/model`.
            internal struct modelPayload: Sendable, Hashable {
                internal var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `modelPayload`.
                ///
                /// - Parameters:
                ///   - body:
                internal init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case model(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranscriptionRequest.modelPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionRequest/language`.
            internal struct languagePayload: Sendable, Hashable {
                internal var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `languagePayload`.
                ///
                /// - Parameters:
                ///   - body:
                internal init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case language(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranscriptionRequest.languagePayload>)
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionRequest/prompt`.
            internal struct promptPayload: Sendable, Hashable {
                internal var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `promptPayload`.
                ///
                /// - Parameters:
                ///   - body:
                internal init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case prompt(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranscriptionRequest.promptPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionRequest/response_format`.
            internal struct response_formatPayload: Sendable, Hashable {
                internal var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `response_formatPayload`.
                ///
                /// - Parameters:
                ///   - body:
                internal init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case response_format(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranscriptionRequest.response_formatPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionRequest/temperature`.
            internal struct temperaturePayload: Sendable, Hashable {
                internal var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `temperaturePayload`.
                ///
                /// - Parameters:
                ///   - body:
                internal init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case temperature(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranscriptionRequest.temperaturePayload>)
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionRequest/timestamp_granularities[]`.
            internal struct timestamp_granularities_lbrack__rbrack_Payload: Sendable, Hashable {
                internal var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `timestamp_granularities_lbrack__rbrack_Payload`.
                ///
                /// - Parameters:
                ///   - body:
                internal init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case timestamp_granularities_lbrack__rbrack_(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranscriptionRequest.timestamp_granularities_lbrack__rbrack_Payload>)
        }
        /// Represents a transcription response returned by model, based on the provided input.
        ///
        /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseJson`.
        internal struct CreateTranscriptionResponseJson: Codable, Hashable, Sendable {
            /// The transcribed text.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseJson/text`.
            internal var text: Swift.String
            /// Creates a new `CreateTranscriptionResponseJson`.
            ///
            /// - Parameters:
            ///   - text: The transcribed text.
            internal init(text: Swift.String) {
                self.text = text
            }
            internal enum CodingKeys: String, CodingKey {
                case text
            }
        }
        /// Represents a verbose json transcription response returned by model, based on the provided input.
        ///
        /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseVerboseJson`.
        internal struct CreateTranscriptionResponseVerboseJson: Codable, Hashable, Sendable {
            /// The language of the input audio.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseVerboseJson/language`.
            internal var language: Swift.String
            /// The duration of the input audio.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseVerboseJson/duration`.
            internal var duration: Swift.String
            /// The transcribed text.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseVerboseJson/text`.
            internal var text: Swift.String
            /// Extracted words and their corresponding timestamps.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseVerboseJson/words`.
            internal var words: [Components.Schemas.TranscriptionWord]?
            /// Segments of the transcribed text and their corresponding details.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranscriptionResponseVerboseJson/segments`.
            internal var segments: [Components.Schemas.TranscriptionSegment]?
            /// Creates a new `CreateTranscriptionResponseVerboseJson`.
            ///
            /// - Parameters:
            ///   - language: The language of the input audio.
            ///   - duration: The duration of the input audio.
            ///   - text: The transcribed text.
            ///   - words: Extracted words and their corresponding timestamps.
            ///   - segments: Segments of the transcribed text and their corresponding details.
            internal init(
                language: Swift.String,
                duration: Swift.String,
                text: Swift.String,
                words: [Components.Schemas.TranscriptionWord]? = nil,
                segments: [Components.Schemas.TranscriptionSegment]? = nil
            ) {
                self.language = language
                self.duration = duration
                self.text = text
                self.words = words
                self.segments = segments
            }
            internal enum CodingKeys: String, CodingKey {
                case language
                case duration
                case text
                case words
                case segments
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateTranslationRequest`.
        internal enum CreateTranslationRequest: Sendable, Hashable {
            /// - Remark: Generated from `#/components/schemas/CreateTranslationRequest/file`.
            internal struct filePayload: Sendable, Hashable {
                internal var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `filePayload`.
                ///
                /// - Parameters:
                ///   - body:
                internal init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case file(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranslationRequest.filePayload>)
            /// - Remark: Generated from `#/components/schemas/CreateTranslationRequest/model`.
            internal struct modelPayload: Sendable, Hashable {
                internal var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `modelPayload`.
                ///
                /// - Parameters:
                ///   - body:
                internal init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case model(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranslationRequest.modelPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateTranslationRequest/prompt`.
            internal struct promptPayload: Sendable, Hashable {
                internal var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `promptPayload`.
                ///
                /// - Parameters:
                ///   - body:
                internal init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case prompt(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranslationRequest.promptPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateTranslationRequest/response_format`.
            internal struct response_formatPayload: Sendable, Hashable {
                internal var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `response_formatPayload`.
                ///
                /// - Parameters:
                ///   - body:
                internal init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case response_format(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranslationRequest.response_formatPayload>)
            /// - Remark: Generated from `#/components/schemas/CreateTranslationRequest/temperature`.
            internal struct temperaturePayload: Sendable, Hashable {
                internal var body: OpenAPIRuntime.HTTPBody
                /// Creates a new `temperaturePayload`.
                ///
                /// - Parameters:
                ///   - body:
                internal init(body: OpenAPIRuntime.HTTPBody) {
                    self.body = body
                }
            }
            case temperature(OpenAPIRuntime.MultipartPart<Components.Schemas.CreateTranslationRequest.temperaturePayload>)
        }
        /// - Remark: Generated from `#/components/schemas/CreateTranslationResponseJson`.
        internal struct CreateTranslationResponseJson: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CreateTranslationResponseJson/text`.
            internal var text: Swift.String
            /// Creates a new `CreateTranslationResponseJson`.
            ///
            /// - Parameters:
            ///   - text:
            internal init(text: Swift.String) {
                self.text = text
            }
            internal enum CodingKeys: String, CodingKey {
                case text
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateTranslationResponseVerboseJson`.
        internal struct CreateTranslationResponseVerboseJson: Codable, Hashable, Sendable {
            /// The language of the output translation (always `english`).
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranslationResponseVerboseJson/language`.
            internal var language: Swift.String
            /// The duration of the input audio.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranslationResponseVerboseJson/duration`.
            internal var duration: Swift.String
            /// The translated text.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranslationResponseVerboseJson/text`.
            internal var text: Swift.String
            /// Segments of the translated text and their corresponding details.
            ///
            /// - Remark: Generated from `#/components/schemas/CreateTranslationResponseVerboseJson/segments`.
            internal var segments: [Components.Schemas.TranscriptionSegment]?
            /// Creates a new `CreateTranslationResponseVerboseJson`.
            ///
            /// - Parameters:
            ///   - language: The language of the output translation (always `english`).
            ///   - duration: The duration of the input audio.
            ///   - text: The translated text.
            ///   - segments: Segments of the translated text and their corresponding details.
            internal init(
                language: Swift.String,
                duration: Swift.String,
                text: Swift.String,
                segments: [Components.Schemas.TranscriptionSegment]? = nil
            ) {
                self.language = language
                self.duration = duration
                self.text = text
                self.segments = segments
            }
            internal enum CodingKeys: String, CodingKey {
                case language
                case duration
                case text
                case segments
            }
        }
        /// - Remark: Generated from `#/components/schemas/FunctionObject`.
        internal struct FunctionObject: Codable, Hashable, Sendable {
            /// A description of what the function does, used by the model to choose when and how to call the function.
            ///
            /// - Remark: Generated from `#/components/schemas/FunctionObject/description`.
            internal var description: Swift.String?
            /// The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
            ///
            /// - Remark: Generated from `#/components/schemas/FunctionObject/name`.
            internal var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/FunctionObject/parameters`.
            internal var parameters: Components.Schemas.FunctionParameters?
            /// Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](docs/guides/function-calling).
            ///
            /// - Remark: Generated from `#/components/schemas/FunctionObject/strict`.
            internal var strict: Swift.Bool?
            /// Creates a new `FunctionObject`.
            ///
            /// - Parameters:
            ///   - description: A description of what the function does, used by the model to choose when and how to call the function.
            ///   - name: The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
            ///   - parameters:
            ///   - strict: Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](docs/guides/function-calling).
            internal init(
                description: Swift.String? = nil,
                name: Swift.String,
                parameters: Components.Schemas.FunctionParameters? = nil,
                strict: Swift.Bool? = nil
            ) {
                self.description = description
                self.name = name
                self.parameters = parameters
                self.strict = strict
            }
            internal enum CodingKeys: String, CodingKey {
                case description
                case name
                case parameters
                case strict
            }
        }
        /// The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
        ///
        /// Omitting `parameters` defines a function with an empty parameter list.
        ///
        /// - Remark: Generated from `#/components/schemas/FunctionParameters`.
        internal struct FunctionParameters: Codable, Hashable, Sendable {
            /// A container of undocumented properties.
            internal var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
            /// Creates a new `FunctionParameters`.
            ///
            /// - Parameters:
            ///   - additionalProperties: A container of undocumented properties.
            internal init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                self.additionalProperties = additionalProperties
            }
            internal init(from decoder: any Decoder) throws {
                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
            }
            internal func encode(to encoder: any Encoder) throws {
                try encoder.encodeAdditionalProperties(additionalProperties)
            }
        }
        /// Represents the url or the content of an image generated by the OpenAI API.
        ///
        /// - Remark: Generated from `#/components/schemas/Image`.
        internal struct Image: Codable, Hashable, Sendable {
            /// The base64-encoded JSON of the generated image, if `response_format` is `b64_json`.
            ///
            /// - Remark: Generated from `#/components/schemas/Image/b64_json`.
            internal var b64_json: Swift.String?
            /// The URL of the generated image, if `response_format` is `url` (default).
            ///
            /// - Remark: Generated from `#/components/schemas/Image/url`.
            internal var url: Swift.String?
            /// The prompt that was used to generate the image, if there was any revision to the prompt.
            ///
            /// - Remark: Generated from `#/components/schemas/Image/revised_prompt`.
            internal var revised_prompt: Swift.String?
            /// Creates a new `Image`.
            ///
            /// - Parameters:
            ///   - b64_json: The base64-encoded JSON of the generated image, if `response_format` is `b64_json`.
            ///   - url: The URL of the generated image, if `response_format` is `url` (default).
            ///   - revised_prompt: The prompt that was used to generate the image, if there was any revision to the prompt.
            internal init(
                b64_json: Swift.String? = nil,
                url: Swift.String? = nil,
                revised_prompt: Swift.String? = nil
            ) {
                self.b64_json = b64_json
                self.url = url
                self.revised_prompt = revised_prompt
            }
            internal enum CodingKeys: String, CodingKey {
                case b64_json
                case url
                case revised_prompt
            }
        }
        /// - Remark: Generated from `#/components/schemas/ImagesResponse`.
        internal struct ImagesResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ImagesResponse/created`.
            internal var created: Swift.Int
            /// - Remark: Generated from `#/components/schemas/ImagesResponse/data`.
            internal var data: [Components.Schemas.Image]
            /// Creates a new `ImagesResponse`.
            ///
            /// - Parameters:
            ///   - created:
            ///   - data:
            internal init(
                created: Swift.Int,
                data: [Components.Schemas.Image]
            ) {
                self.created = created
                self.data = data
            }
            internal enum CodingKeys: String, CodingKey {
                case created
                case data
            }
        }
        /// Whether to enable [parallel function calling](/docs/guides/function-calling/parallel-function-calling) during tool use.
        ///
        /// - Remark: Generated from `#/components/schemas/ParallelToolCalls`.
        internal typealias ParallelToolCalls = Swift.Bool
        /// - Remark: Generated from `#/components/schemas/ResponseFormatJsonObject`.
        internal struct ResponseFormatJsonObject: Codable, Hashable, Sendable {
            /// The type of response format being defined: `json_object`
            ///
            /// - Remark: Generated from `#/components/schemas/ResponseFormatJsonObject/type`.
            internal enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case json_object = "json_object"
            }
            /// The type of response format being defined: `json_object`
            ///
            /// - Remark: Generated from `#/components/schemas/ResponseFormatJsonObject/type`.
            internal var _type: Components.Schemas.ResponseFormatJsonObject._typePayload
            /// Creates a new `ResponseFormatJsonObject`.
            ///
            /// - Parameters:
            ///   - _type: The type of response format being defined: `json_object`
            internal init(_type: Components.Schemas.ResponseFormatJsonObject._typePayload) {
                self._type = _type
            }
            internal enum CodingKeys: String, CodingKey {
                case _type = "type"
            }
        }
        /// - Remark: Generated from `#/components/schemas/ResponseFormatJsonSchema`.
        internal struct ResponseFormatJsonSchema: Codable, Hashable, Sendable {
            /// The type of response format being defined: `json_schema`
            ///
            /// - Remark: Generated from `#/components/schemas/ResponseFormatJsonSchema/type`.
            internal enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case json_schema = "json_schema"
            }
            /// The type of response format being defined: `json_schema`
            ///
            /// - Remark: Generated from `#/components/schemas/ResponseFormatJsonSchema/type`.
            internal var _type: Components.Schemas.ResponseFormatJsonSchema._typePayload
            /// - Remark: Generated from `#/components/schemas/ResponseFormatJsonSchema/json_schema`.
            internal struct json_schemaPayload: Codable, Hashable, Sendable {
                /// A description of what the response format is for, used by the model to determine how to respond in the format.
                ///
                /// - Remark: Generated from `#/components/schemas/ResponseFormatJsonSchema/json_schema/description`.
                internal var description: Swift.String?
                /// The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
                ///
                /// - Remark: Generated from `#/components/schemas/ResponseFormatJsonSchema/json_schema/name`.
                internal var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/ResponseFormatJsonSchema/json_schema/schema`.
                internal var schema: Components.Schemas.ResponseFormatJsonSchemaSchema?
                /// Whether to enable strict schema adherence when generating the output. If set to true, the model will always follow the exact schema defined in the `schema` field. Only a subset of JSON Schema is supported when `strict` is `true`. To learn more, read the [Structured Outputs guide](/docs/guides/structured-outputs).
                ///
                /// - Remark: Generated from `#/components/schemas/ResponseFormatJsonSchema/json_schema/strict`.
                internal var strict: Swift.Bool?
                /// Creates a new `json_schemaPayload`.
                ///
                /// - Parameters:
                ///   - description: A description of what the response format is for, used by the model to determine how to respond in the format.
                ///   - name: The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
                ///   - schema:
                ///   - strict: Whether to enable strict schema adherence when generating the output. If set to true, the model will always follow the exact schema defined in the `schema` field. Only a subset of JSON Schema is supported when `strict` is `true`. To learn more, read the [Structured Outputs guide](/docs/guides/structured-outputs).
                internal init(
                    description: Swift.String? = nil,
                    name: Swift.String,
                    schema: Components.Schemas.ResponseFormatJsonSchemaSchema? = nil,
                    strict: Swift.Bool? = nil
                ) {
                    self.description = description
                    self.name = name
                    self.schema = schema
                    self.strict = strict
                }
                internal enum CodingKeys: String, CodingKey {
                    case description
                    case name
                    case schema
                    case strict
                }
            }
            /// - Remark: Generated from `#/components/schemas/ResponseFormatJsonSchema/json_schema`.
            internal var json_schema: Components.Schemas.ResponseFormatJsonSchema.json_schemaPayload
            /// Creates a new `ResponseFormatJsonSchema`.
            ///
            /// - Parameters:
            ///   - _type: The type of response format being defined: `json_schema`
            ///   - json_schema:
            internal init(
                _type: Components.Schemas.ResponseFormatJsonSchema._typePayload,
                json_schema: Components.Schemas.ResponseFormatJsonSchema.json_schemaPayload
            ) {
                self._type = _type
                self.json_schema = json_schema
            }
            internal enum CodingKeys: String, CodingKey {
                case _type = "type"
                case json_schema
            }
        }
        /// The schema for the response format, described as a JSON Schema object.
        ///
        /// - Remark: Generated from `#/components/schemas/ResponseFormatJsonSchemaSchema`.
        internal struct ResponseFormatJsonSchemaSchema: Codable, Hashable, Sendable {
            /// A container of undocumented properties.
            internal var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
            /// Creates a new `ResponseFormatJsonSchemaSchema`.
            ///
            /// - Parameters:
            ///   - additionalProperties: A container of undocumented properties.
            internal init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                self.additionalProperties = additionalProperties
            }
            internal init(from decoder: any Decoder) throws {
                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
            }
            internal func encode(to encoder: any Encoder) throws {
                try encoder.encodeAdditionalProperties(additionalProperties)
            }
        }
        /// - Remark: Generated from `#/components/schemas/ResponseFormatText`.
        internal struct ResponseFormatText: Codable, Hashable, Sendable {
            /// The type of response format being defined: `text`
            ///
            /// - Remark: Generated from `#/components/schemas/ResponseFormatText/type`.
            internal enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case text = "text"
            }
            /// The type of response format being defined: `text`
            ///
            /// - Remark: Generated from `#/components/schemas/ResponseFormatText/type`.
            internal var _type: Components.Schemas.ResponseFormatText._typePayload
            /// Creates a new `ResponseFormatText`.
            ///
            /// - Parameters:
            ///   - _type: The type of response format being defined: `text`
            internal init(_type: Components.Schemas.ResponseFormatText._typePayload) {
                self._type = _type
            }
            internal enum CodingKeys: String, CodingKey {
                case _type = "type"
            }
        }
        /// - Remark: Generated from `#/components/schemas/TranscriptionSegment`.
        internal struct TranscriptionSegment: Codable, Hashable, Sendable {
            /// Unique identifier of the segment.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionSegment/id`.
            internal var id: Swift.Int
            /// Seek offset of the segment.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionSegment/seek`.
            internal var seek: Swift.Int
            /// Start time of the segment in seconds.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionSegment/start`.
            internal var start: Swift.Float
            /// End time of the segment in seconds.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionSegment/end`.
            internal var end: Swift.Float
            /// Text content of the segment.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionSegment/text`.
            internal var text: Swift.String
            /// Array of token IDs for the text content.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionSegment/tokens`.
            internal var tokens: [Swift.Int]
            /// Temperature parameter used for generating the segment.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionSegment/temperature`.
            internal var temperature: Swift.Float
            /// Average logprob of the segment. If the value is lower than -1, consider the logprobs failed.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionSegment/avg_logprob`.
            internal var avg_logprob: Swift.Float
            /// Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionSegment/compression_ratio`.
            internal var compression_ratio: Swift.Float
            /// Probability of no speech in the segment. If the value is higher than 1.0 and the `avg_logprob` is below -1, consider this segment silent.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionSegment/no_speech_prob`.
            internal var no_speech_prob: Swift.Float
            /// Creates a new `TranscriptionSegment`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier of the segment.
            ///   - seek: Seek offset of the segment.
            ///   - start: Start time of the segment in seconds.
            ///   - end: End time of the segment in seconds.
            ///   - text: Text content of the segment.
            ///   - tokens: Array of token IDs for the text content.
            ///   - temperature: Temperature parameter used for generating the segment.
            ///   - avg_logprob: Average logprob of the segment. If the value is lower than -1, consider the logprobs failed.
            ///   - compression_ratio: Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed.
            ///   - no_speech_prob: Probability of no speech in the segment. If the value is higher than 1.0 and the `avg_logprob` is below -1, consider this segment silent.
            internal init(
                id: Swift.Int,
                seek: Swift.Int,
                start: Swift.Float,
                end: Swift.Float,
                text: Swift.String,
                tokens: [Swift.Int],
                temperature: Swift.Float,
                avg_logprob: Swift.Float,
                compression_ratio: Swift.Float,
                no_speech_prob: Swift.Float
            ) {
                self.id = id
                self.seek = seek
                self.start = start
                self.end = end
                self.text = text
                self.tokens = tokens
                self.temperature = temperature
                self.avg_logprob = avg_logprob
                self.compression_ratio = compression_ratio
                self.no_speech_prob = no_speech_prob
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case seek
                case start
                case end
                case text
                case tokens
                case temperature
                case avg_logprob
                case compression_ratio
                case no_speech_prob
            }
        }
        /// - Remark: Generated from `#/components/schemas/TranscriptionWord`.
        internal struct TranscriptionWord: Codable, Hashable, Sendable {
            /// The text content of the word.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionWord/word`.
            internal var word: Swift.String
            /// Start time of the word in seconds.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionWord/start`.
            internal var start: Swift.Float
            /// End time of the word in seconds.
            ///
            /// - Remark: Generated from `#/components/schemas/TranscriptionWord/end`.
            internal var end: Swift.Float
            /// Creates a new `TranscriptionWord`.
            ///
            /// - Parameters:
            ///   - word: The text content of the word.
            ///   - start: Start time of the word in seconds.
            ///   - end: End time of the word in seconds.
            internal init(
                word: Swift.String,
                start: Swift.Float,
                end: Swift.Float
            ) {
                self.word = word
                self.start = start
                self.end = end
            }
            internal enum CodingKeys: String, CodingKey {
                case word
                case start
                case end
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    internal enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    internal enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    internal enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    internal enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
internal enum Operations {
    /// Generates audio from the input text.
    ///
    /// - Remark: HTTP `POST /audio/speech`.
    /// - Remark: Generated from `#/paths//audio/speech/post(createSpeech)`.
    internal enum createSpeech {
        internal static let id: Swift.String = "createSpeech"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/audio/speech/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createSpeech.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createSpeech.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.createSpeech.Input.Headers
            /// - Remark: Generated from `#/paths/audio/speech/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/audio/speech/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateSpeechRequest)
            }
            internal var body: Operations.createSpeech.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            internal init(
                headers: Operations.createSpeech.Input.Headers = .init(),
                body: Operations.createSpeech.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/audio/speech/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// chunked
                    ///
                    /// - Remark: Generated from `#/paths/audio/speech/POST/responses/200/headers/Transfer-Encoding`.
                    internal var Transfer_hyphen_Encoding: Swift.String?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - Transfer_hyphen_Encoding: chunked
                    internal init(Transfer_hyphen_Encoding: Swift.String? = nil) {
                        self.Transfer_hyphen_Encoding = Transfer_hyphen_Encoding
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.createSpeech.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/audio/speech/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/audio/speech/POST/responses/200/content/application\/octet-stream`.
                    case binary(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.binary`.
                    ///
                    /// - Throws: An error if `self` is not `.binary`.
                    /// - SeeAlso: `.binary`.
                    internal var binary: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .binary(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.createSpeech.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.createSpeech.Output.Ok.Headers = .init(),
                    body: Operations.createSpeech.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//audio/speech/post(createSpeech)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createSpeech.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.createSpeech.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case binary
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/octet-stream":
                    self = .binary
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .binary:
                    return "application/octet-stream"
                }
            }
            internal static var allCases: [Self] {
                [
                    .binary
                ]
            }
        }
    }
    /// Transcribes audio into the input language.
    ///
    /// - Remark: HTTP `POST /audio/transcriptions`.
    /// - Remark: Generated from `#/paths//audio/transcriptions/post(createTranscription)`.
    internal enum createTranscription {
        internal static let id: Swift.String = "createTranscription"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/audio/transcriptions/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createTranscription.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createTranscription.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.createTranscription.Input.Headers
            /// - Remark: Generated from `#/paths/audio/transcriptions/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/audio/transcriptions/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Components.Schemas.CreateTranscriptionRequest>)
            }
            internal var body: Operations.createTranscription.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            internal init(
                headers: Operations.createTranscription.Input.Headers = .init(),
                body: Operations.createTranscription.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/audio/transcriptions/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/audio/transcriptions/POST/responses/200/content/json`.
                    internal enum jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/audio/transcriptions/POST/responses/200/content/json/case1`.
                        case CreateTranscriptionResponseJson(Components.Schemas.CreateTranscriptionResponseJson)
                        /// - Remark: Generated from `#/paths/audio/transcriptions/POST/responses/200/content/json/case2`.
                        case CreateTranscriptionResponseVerboseJson(Components.Schemas.CreateTranscriptionResponseVerboseJson)
                        internal init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .CreateTranscriptionResponseJson(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .CreateTranscriptionResponseVerboseJson(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        internal func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .CreateTranscriptionResponseJson(value):
                                try value.encode(to: encoder)
                            case let .CreateTranscriptionResponseVerboseJson(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/audio/transcriptions/POST/responses/200/content/application\/json`.
                    case json(Operations.createTranscription.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.createTranscription.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.createTranscription.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.createTranscription.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//audio/transcriptions/post(createTranscription)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createTranscription.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.createTranscription.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Translates audio into English.
    ///
    /// - Remark: HTTP `POST /audio/translations`.
    /// - Remark: Generated from `#/paths//audio/translations/post(createTranslation)`.
    internal enum createTranslation {
        internal static let id: Swift.String = "createTranslation"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/audio/translations/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createTranslation.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createTranslation.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.createTranslation.Input.Headers
            /// - Remark: Generated from `#/paths/audio/translations/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/audio/translations/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Components.Schemas.CreateTranslationRequest>)
            }
            internal var body: Operations.createTranslation.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            internal init(
                headers: Operations.createTranslation.Input.Headers = .init(),
                body: Operations.createTranslation.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/audio/translations/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/audio/translations/POST/responses/200/content/json`.
                    internal enum jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/audio/translations/POST/responses/200/content/json/case1`.
                        case CreateTranslationResponseJson(Components.Schemas.CreateTranslationResponseJson)
                        /// - Remark: Generated from `#/paths/audio/translations/POST/responses/200/content/json/case2`.
                        case CreateTranslationResponseVerboseJson(Components.Schemas.CreateTranslationResponseVerboseJson)
                        internal init(from decoder: any Decoder) throws {
                            var errors: [any Error] = []
                            do {
                                self = .CreateTranslationResponseJson(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            do {
                                self = .CreateTranslationResponseVerboseJson(try .init(from: decoder))
                                return
                            } catch {
                                errors.append(error)
                            }
                            throw Swift.DecodingError.failedToDecodeOneOfSchema(
                                type: Self.self,
                                codingPath: decoder.codingPath,
                                errors: errors
                            )
                        }
                        internal func encode(to encoder: any Encoder) throws {
                            switch self {
                            case let .CreateTranslationResponseJson(value):
                                try value.encode(to: encoder)
                            case let .CreateTranslationResponseVerboseJson(value):
                                try value.encode(to: encoder)
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/audio/translations/POST/responses/200/content/application\/json`.
                    case json(Operations.createTranslation.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.createTranslation.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.createTranslation.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.createTranslation.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//audio/translations/post(createTranslation)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createTranslation.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.createTranslation.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Creates a model response for the given chat conversation. Learn more in the
    /// [text generation](/docs/guides/text-generation), [vision](/docs/guides/vision),
    /// and [audio](/docs/guides/audio) guides.
    ///
    ///
    /// - Remark: HTTP `POST /chat/completions`.
    /// - Remark: Generated from `#/paths//chat/completions/post(createChatCompletion)`.
    internal enum createChatCompletion {
        internal static let id: Swift.String = "createChatCompletion"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/chat/completions/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createChatCompletion.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createChatCompletion.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.createChatCompletion.Input.Headers
            /// - Remark: Generated from `#/paths/chat/completions/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat/completions/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateChatCompletionRequest)
            }
            internal var body: Operations.createChatCompletion.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            internal init(
                headers: Operations.createChatCompletion.Input.Headers = .init(),
                body: Operations.createChatCompletion.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat/completions/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chat/completions/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.CreateChatCompletionResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.CreateChatCompletionResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.createChatCompletion.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.createChatCompletion.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//chat/completions/post(createChatCompletion)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createChatCompletion.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.createChatCompletion.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Creates an edited or extended image given an original image and a prompt.
    ///
    /// - Remark: HTTP `POST /images/edits`.
    /// - Remark: Generated from `#/paths//images/edits/post(createImageEdit)`.
    internal enum createImageEdit {
        internal static let id: Swift.String = "createImageEdit"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/images/edits/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createImageEdit.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createImageEdit.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.createImageEdit.Input.Headers
            /// - Remark: Generated from `#/paths/images/edits/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/edits/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Components.Schemas.CreateImageEditRequest>)
            }
            internal var body: Operations.createImageEdit.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            internal init(
                headers: Operations.createImageEdit.Input.Headers = .init(),
                body: Operations.createImageEdit.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/edits/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/images/edits/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ImagesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ImagesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.createImageEdit.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.createImageEdit.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//images/edits/post(createImageEdit)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createImageEdit.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.createImageEdit.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Creates an image given a prompt.
    ///
    /// - Remark: HTTP `POST /images/generations`.
    /// - Remark: Generated from `#/paths//images/generations/post(createImage)`.
    internal enum createImage {
        internal static let id: Swift.String = "createImage"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/images/generations/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createImage.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createImage.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.createImage.Input.Headers
            /// - Remark: Generated from `#/paths/images/generations/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/generations/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateImageRequest)
            }
            internal var body: Operations.createImage.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            internal init(
                headers: Operations.createImage.Input.Headers = .init(),
                body: Operations.createImage.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/generations/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/images/generations/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ImagesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ImagesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.createImage.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.createImage.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//images/generations/post(createImage)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createImage.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.createImage.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Creates a variation of a given image.
    ///
    /// - Remark: HTTP `POST /images/variations`.
    /// - Remark: Generated from `#/paths//images/variations/post(createImageVariation)`.
    internal enum createImageVariation {
        internal static let id: Swift.String = "createImageVariation"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/images/variations/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createImageVariation.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createImageVariation.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.createImageVariation.Input.Headers
            /// - Remark: Generated from `#/paths/images/variations/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/variations/POST/requestBody/content/multipart\/form-data`.
                case multipartForm(OpenAPIRuntime.MultipartBody<Components.Schemas.CreateImageVariationRequest>)
            }
            internal var body: Operations.createImageVariation.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            internal init(
                headers: Operations.createImageVariation.Input.Headers = .init(),
                body: Operations.createImageVariation.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/images/variations/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/images/variations/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ImagesResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Components.Schemas.ImagesResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.createImageVariation.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.createImageVariation.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//images/variations/post(createImageVariation)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createImageVariation.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.createImageVariation.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
